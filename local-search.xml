<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《网络安全法》期末复习</title>
    <link href="/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/"/>
    <url>/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/</url>
    
    <content type="html"><![CDATA[<h1 id="《网络安全法》期末复习"><a href="#《网络安全法》期末复习" class="headerlink" title="《网络安全法》期末复习"></a>《网络安全法》期末复习</h1><p><strong>by尔康康康康</strong></p><h2 id="第一章-网络与网络安全基础"><a href="#第一章-网络与网络安全基础" class="headerlink" title="第一章-网络与网络安全基础"></a>第一章-网络与网络安全基础</h2><h3 id="1-一些定义与概念"><a href="#1-一些定义与概念" class="headerlink" title="1.一些定义与概念"></a>1.一些定义与概念</h3><p><strong>将“网络”定义为</strong>“由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统”</p><p><strong>网络体系</strong>即为了完成计算机之间的通信合作，将互联功能划分为有明确定义的各个层，并规定同层的进程通信协议，以及相邻层之间的接口和所提供的服务。</p><p><strong>计算机网络体系结构</strong>，由高到低分为：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层</p><p><strong>网络安全定义为</strong>：通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力</p><h3 id="2-网络安全基本特征"><a href="#2-网络安全基本特征" class="headerlink" title="2.网络安全基本特征"></a>2.网络安全基本特征</h3><p>  <strong>（一）保密性</strong></p><p>保密性是指网络信息不泄露给非授权用户、实体，或供其利用的特性。保密性是保证网络信息安全的一个非常重要的手段，可以通过信息加密、身份认证、访问控制、安全通信协议等技术实现。信息加密是防止信息非法泄露的最基本的手段，主要强调有用信息只 被授权对象使用的特征。 </p><p><strong>（二）完整性</strong> </p><p>完整性是指网络信息未经授权不能进行改变的特性，即网络信息在存储和传输过程中 不被删除、修改、伪造、乱序、重放和插入等操作改变，保持信息的原样 （影响网络信息完整性的主要因素包括设备故障、误码、人为攻击以及计算机病毒等。 </p><p><strong>（三）可用性</strong></p><p> 可用性是指网络信息可被授权用户访问并按需求使用的特性。这里可用性包含两个含义：当授权用户访问网络时不致被拒绝；授权用户访问网络时要进行身份识别与确认，并且对用户的访问权限加以规定的限制。除了在系统运行时正确存取所需信息外，可用性还 指当系统遭受意外攻击或破时，可以迅速恢复并能投入使用。 </p><p><strong>（四）可控性</strong></p><p> 可控性要求能对信息的传播及内容具有控制能力，不允许不良内容通过公共网络进行传输。 </p><p><strong>（五）可审计性</strong> </p><p>可审计性指出现安全问题时能够提供依据与手段。通过对互联网和信息系统的工作过程进行详尽的审计跟踪，可以监控和捕提各种安全事件；保存、维护和管理审计日志，可以发现系统出现问题的据。 </p><p><strong>（六）不可抵赖性</strong> </p><p>不可抵赖性也称不可否认性，主要用于网络信息的交换过程，保证信息交换的参与者本身和所提供的信息真实同一性，即所有参与者都不可能否认或抵赖曾进行的操作，类似于发文或收文过程中的签名和签收过程。 </p><p><strong>（七）用户行为的可信性</strong> </p><p>用户行为指用户在使用网络服务过程中产生的浏览、点击、下载等行为，是用户使用网络服务的体现。在可信网络中，用户身份可信并不等同于用户行为可信，高可信用户也可能存在不可靠的、低可信的用户行为。用户行为的可信与否，涉及监控或阻止恶意用户的成本，也与网络资源的管理及有效利用有关。</p><h2 id="第二章-网络空间安全战略"><a href="#第二章-网络空间安全战略" class="headerlink" title="第二章-网络空间安全战略"></a>第二章-网络空间安全战略</h2><img src="/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/1720024159632-41fab1f5-6525-4944-9ada-38d8108730cb.png" class="" title="img"><h3 id="1-五大目标"><a href="#1-五大目标" class="headerlink" title="1.五大目标:"></a>1.五大目标:</h3><p><strong>和平：</strong>信息技术滥用得到有效遏制，网络空间军备竞赛等威胁国际和平的活动得到有效控制，网络空间冲突得到有效防范。 </p><p><strong>安全：</strong>网络安全风险得到有效控制，国家网络安全保障体系健全完善，核心技术装备安全可控，网络和信息系统运行稳定可靠。网络安全人才满足需求，全社会的网络安全意识、基本防护技能和利用网络的信心大幅提升。 </p><p><strong>开放：</strong>信息技术标准、政策和市场开放、透明，产品流通和信息传播更加顺畅，数字鸿沟日益弥合。不分大小、强弱、贫富，世界各国特别是发展中国家都能分享发展机遇、共享发展成果、公平参与网络空间治理。 </p><p><strong>合作</strong>：世界各国在技术交流、打击网络恐怖和网络犯罪等领域的合作更加密切，多边、民主、透明的国际互联网治理体系健全完善，以合作共赢为核心的网络空间命运共同体逐步形成。 </p><p><strong>有序：</strong>公众在网络空间的知情权、参与权、表达权、监督权等合法权益得到充分保障，网络空间个人隐私获得有效保护，人权受到充分尊重。网络空间的国内和国际法律体系、标准规范逐步建立，网络空间实现依法有效治理，网络环境诚信、文明、健康，信息自由流动与维护国家安全、公共利益实现有机统一。</p><h3 id="2-四大原则："><a href="#2-四大原则：" class="headerlink" title="2.四大原则："></a>2.四大原则：</h3><p>第一.尊重维护网络空间主权。网络空间主权不容侵犯，尊重各国自主选择发展道路、网络管理模式、互联网公共政策和平等参与国际网络空间治理的权利。 </p><p>第二.和平利用网络空间。和平利用网络空间符合人类的共同利益。各国应遵守《联合国宪章》关于不得使用或威肠使用武力的原则，防止信息技术被用于与维护国际安全与稳定相悖的目的，共同抵制网络空间军备竞赛，防范网络空间冲突。 </p><p>第三.依法治理网络空间。全面推进网络空间法治化，坚持依法治网、依法办网、依法上网，让互联网在法治轨道工健康运行。 </p><p>第四.统筹网络安全与发展。没有网络安全就没有国家安全，没有信息化就没有现代化。网络安全和信息化是一体之两翼、驱动之双轮。正确处理发展和安全的关系，坚持以安全保发展，以发展促全。</p><h3 id="3-九大战略任务："><a href="#3-九大战略任务：" class="headerlink" title="3.九大战略任务："></a>3.九大战略任务：</h3><ol><li>坚定捍卫网络空间主权</li><li>坚决维护国家安全</li><li>保护关键信息基础设施</li><li>加强网络文化建设</li><li>打击网络恐怖和违法犯罪</li><li>完善网络治理体系</li><li>夯实网络安全基础</li><li>提升网络空间防护能力</li><li>强化网络空间国际合作</li></ol><h3 id="4-网络空间安全战略的意义"><a href="#4-网络空间安全战略的意义" class="headerlink" title="4.网络空间安全战略的意义"></a>4.网络空间安全战略的意义</h3><p>第一，国家网络空间安全战略是国家管理网络意志的最高体现。 </p><p>第二，国家网络空间安全战略是国家安全战略的重要组成部分。 </p><p>第三，网络空间安全战略是维护网络空间主权，发展网络空间合作关系的重要宣言。</p><h2 id="第三章-《网络安全法》概述"><a href="#第三章-《网络安全法》概述" class="headerlink" title="第三章-《网络安全法》概述"></a>第三章-《网络安全法》概述</h2><img src="/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/1720024210792-157d0f9c-6dc4-4335-a3c7-6ad1c273d98c.png" class="" title="img"><h3 id="1-谈谈对《网络安全法》的认识"><a href="#1-谈谈对《网络安全法》的认识" class="headerlink" title="1.谈谈对《网络安全法》的认识"></a>1.谈谈对《网络安全法》的认识</h3><p><strong>（一）立法背景：</strong></p><p>（1）时代背景</p><p>  当前我国面临的国内和国际信息安全形势相当复杂和严峻，境外敌对势力的网络浸透日益泛化，国内各种极端势力进行的网络恐怖活动及社会矛盾交融所产生的国家安全和社会稳定任务更加迫切。“多网域跨际”和“供应链渗透”威胁着能源、通信、金融、工业等国家关键基础设施的安全。大数据挖掘和数据跨境流动广泛融入现代商业的发展模式中，给涉及我国商业运行数据、公民个人敏感数据等国家数据主权，特别是国家独立的司法权力架构带来了结构性的挑战。 在这样的形势下制定《网络安全法》是适应我国网络安全工作新形势、新任务，落实中央决策部署，保障网络安全和发展利益的重大举措，是落实国家总体安全观的重要举措。</p><p>（2）国际背景</p><p>国际层面，和平与发展仍然是当今时代的主题，但随着世界政治多极化、经济全球化、文化多样化、社会信息化的深入发展，国家间的竞争空前激烈，传统安全问题与非传统安全问题交织，国际关系复杂程度前所未有。网络空间已成为各国竞争与博弈的新领域，其安全性与战略性已成为各国关注的重点。为了应对这种局面，各国纷纷加大了对网络安全治理与立法的力度，网络安全相关法案相继出台。 </p><p><strong>（二）立法意义</strong> </p><p>《网络安全法》是国家安全法律制度体系中的重要组成部分，是网络安全领域的基础性大法，对于确立我国网络安全基本管理制度具有里程碑式的重要义。 《网络安全法》的出台有助于我国网络空间安全战略和重要领域安全规划的法治化建设，有助于推进我国与其他国家或组织就网络安全问题展开有效的战略博弈，有助于公民个人信息保护进入正轨，有助于打击网络暴力、网络谣言、网络欺诈等网络违法犯罪行为，为我国“互联网+”的长远发展保驾护航。</p><p><strong>立法时间：</strong>2016年11月7日</p><p><strong>发展历程：</strong></p><p>1.第一阶段：自由发展阶段(1997年以前)</p><p>2.第二阶段：探索治理阶段(1997-2013年)</p><p>3.第三阶段：战略法制阶段(2014年至今)</p><p><strong>三大法律原则：</strong></p><p>1.网络安全主权原则</p><p>2.网络安全与信息化发展并重原则</p><p>3.共同治理原则</p><p><strong>10类网络法律制度+16种处罚措施</strong></p><p><strong>配套立法：</strong></p><p>1.《中华人民共和国测绘法》</p><p>2.《中华人民共和国电子商务法》</p><p>3.《中华人民共和国密码法》</p><p>4.《未成年人网络保护条例》</p><p><strong>配套法规：一系列</strong></p><p><strong>与已有立法衔接：《国家安全法》《反恐怖主义法》《刑法》《中华人民共和国治安管理处罚法》</strong></p><h2 id="第四章-网络空间主权制度"><a href="#第四章-网络空间主权制度" class="headerlink" title="第四章-网络空间主权制度"></a>第四章-网络空间主权制度</h2><h3 id="1-网络空间主权概念"><a href="#1-网络空间主权概念" class="headerlink" title="1.网络空间主权概念"></a>1.网络空间主权概念</h3><p>网络空间主权，是指一个国家在建设、运营、维护和使用网络，以及在网络安全的监督管理方面所拥有的自主决定权。网络空间主权是国家主权在网络空间中的自然延伸和表现，是国家主权的重要组成部分。作为国家主权的延伸和表现，网络空间主权集中体现了国家在网络空间可以独立自主地处理内外事务，享有在网络空间的管辖权、独立权、自卫权和平等权等权利。</p><h3 id="2-构建我国网络空间主权应当采取什么样的措施？"><a href="#2-构建我国网络空间主权应当采取什么样的措施？" class="headerlink" title="2.构建我国网络空间主权应当采取什么样的措施？"></a>2.构建我国网络空间主权应当采取什么样的措施？</h3><p>1.在技术上构建中立的网络基础措施</p><p>2.在管理上界定网络管辖权的范围</p><p>3.在军事上构建防卫网络安全机制</p><p>4.在法律上确定网络空间主权体系</p><p>5.国际层面</p><p>(1)发展网络空间共治权力</p><p>①平等参与网络空间治理</p><p>②共同利用网络空间</p><p>(2)制定公平科学的网络空间国际规则</p><h2 id="第五章-网络安全支持与促进"><a href="#第五章-网络安全支持与促进" class="headerlink" title="第五章-网络安全支持与促进"></a>第五章-网络安全支持与促进</h2><h3 id="1-我国还可以从哪些方面进一步促进网络安全产业发展？谈谈你的想法？"><a href="#1-我国还可以从哪些方面进一步促进网络安全产业发展？谈谈你的想法？" class="headerlink" title="1.我国还可以从哪些方面进一步促进网络安全产业发展？谈谈你的想法？"></a>1.我国还可以从哪些方面进一步促进网络安全产业发展？谈谈你的想法？</h3><img src="/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/1720024301416-37b4117b-88cd-4bdc-b975-483da06f0332.jpeg" class="" title="img"><h2 id="第六章-网络运行安全一般规定"><a href="#第六章-网络运行安全一般规定" class="headerlink" title="第六章-网络运行安全一般规定"></a>第六章-网络运行安全一般规定</h2><h3 id="1-简述网络安全等级保护制度的主要内容"><a href="#1-简述网络安全等级保护制度的主要内容" class="headerlink" title="1.简述网络安全等级保护制度的主要内容"></a>1.简述网络安全等级保护制度的主要内容</h3><p><strong>概念：</strong>网络安全等级保护制度是指国家对在中华人民共和国境内建设、运营、维护、使用的网络，实施分等级保护、分等级监管的法律制度。</p><p><strong>基本要求：</strong></p><p>1.所有网络每年至少进行一次自查，发现风险后整改并报告</p><p>2.拟定级在第二级及以上的网络实行专家评审和备案制。</p><p>3.对第三级及以上网络实行强制测评制度，监测预警和信息通报制度，同时要求制定应急响应预案和应急响应报告制</p><img src="/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/1720024327205-6c501458-c08c-4001-95ef-a3531f62a95d.jpeg" class="" title="img"><h2 id="第七章-关键信息基础设施安全"><a href="#第七章-关键信息基础设施安全" class="headerlink" title="第七章-关键信息基础设施安全"></a>第七章-关键信息基础设施安全</h2><h3 id="1-关键信息基础设施概念"><a href="#1-关键信息基础设施概念" class="headerlink" title="1.关键信息基础设施概念"></a>1.关键信息基础设施概念</h3><p>国家关键信息基础设施是指关系国家安全、国际民生，一旦数据泄露、遭到破坏或者丧失功能可能严重危害国家安全、公共利益的信息设备</p><h3 id="2-我国关键信息基础措施的保护框架"><a href="#2-我国关键信息基础措施的保护框架" class="headerlink" title="2.我国关键信息基础措施的保护框架"></a>2.我国关键信息基础措施的保护框架</h3><p>1.编制关键信息基础设施安全规划</p><p>2.建设关键信息基础设施“三同步”制度</p><p>3.规定关键信息基础设施运营者的安全保护义务</p><p>4.建立关键信息基础设施运营者采购的网络安全审查制度</p><p>5.建立信息基础设施运营者采购的保密协议制度</p><p>6.建立数据本地存储制度</p><p>7.建立定期检测评估制度</p><h3 id="3-我国关键信息基础设施运营者的安全保护义务"><a href="#3-我国关键信息基础设施运营者的安全保护义务" class="headerlink" title="3.我国关键信息基础设施运营者的安全保护义务"></a>3.我国关键信息基础设施运营者的安全保护义务</h3><p>1.设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>2.定期对从业人员进行网络安全教育、技术培训和技术考核；</p><p>3.对重要系统和数据库进行灾容备份；</p><p>4.制定网络安全事件应急预案，并定期进行演练；</p><p>5.法律、行政法规规定的其他义务</p><h2 id="第八章-数据本地化与数据跨境流动"><a href="#第八章-数据本地化与数据跨境流动" class="headerlink" title="第八章-数据本地化与数据跨境流动"></a>第八章-数据本地化与数据跨境流动</h2><h3 id="1-数据本地化的意义"><a href="#1-数据本地化的意义" class="headerlink" title="1.数据本地化的意义"></a>1.数据本地化的意义</h3><p>1.数据本地化立法（政策）捍卫国家政治安全</p><p>2.数据本地化立法（政策）保障国民财产与人身安全</p><h3 id="2-数据本地化的模式"><a href="#2-数据本地化的模式" class="headerlink" title="2.数据本地化的模式"></a>2.数据本地化的模式</h3><p>1.要求数据中心建在境内</p><p>2.禁止数据离境</p><p>3.对数据出口征税</p><h3 id="3-《网络安全法》第三十七条"><a href="#3-《网络安全法》第三十七条" class="headerlink" title="3.《网络安全法》第三十七条"></a>3.《网络安全法》第三十七条</h3><p>原文：关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p>释义：该法条包含三层含义，第一，规制主体是关键信息基础设施的运营者。关键信息基础设施的运营者指主要涉及公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等基础设施的运营者。第二，条文涉及数据并不是所有的数据，只限于个人信息和重要数据。这里的重要数据是对国家而言，而不是针对企业和个人。第三，确立数据跨境流动的安全评估机制。如果因业务需要，需要数据境外跨境流动时，应当按照网信主管部决门制定的办法进行安全评估。</p><h2 id="第九章-网络信息内容安全与管理"><a href="#第九章-网络信息内容安全与管理" class="headerlink" title="第九章-网络信息内容安全与管理"></a>第九章-网络信息内容安全与管理</h2><p>无重要考点</p><h2 id="第十章-个人信息保护"><a href="#第十章-个人信息保护" class="headerlink" title="第十章-个人信息保护"></a>第十章-个人信息保护</h2><h3 id="1-个人信息核心要素：关联，识别"><a href="#1-个人信息核心要素：关联，识别" class="headerlink" title="1.个人信息核心要素：关联，识别"></a>1.个人信息核心要素：关联，识别</h3><p>1.个人信息可以识别出特定主体</p><p>2.个人信息并不必然为信息主体知悉</p><p>3.个人信息是自然人的数据信息</p><p>4.个人信息形式上是客观存在的</p><p>5.具有明显的非物质特征</p><h3 id="2-个人信息权"><a href="#2-个人信息权" class="headerlink" title="2.个人信息权"></a>2.个人信息权</h3><p>个人信息权是指信息主体对其信息享有占有，使用，收益，处分，并有权防止他人侵害的权利</p><img src="/2024/07/08/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E6%9C%9F%E6%9C%AB%E6%A2%AD%E5%93%88/1720024347490-8d45d7a5-19c3-436c-beba-b2102b98976c.jpeg" class="" title="img"><h3 id="3-个人信息收集原则"><a href="#3-个人信息收集原则" class="headerlink" title="3.个人信息收集原则"></a>3.个人信息收集原则</h3><p>（1）遵循合法、正当和必要原则。</p><p>（2）符合公正透明原则。</p><p>（3）满足选择同意原则。</p><h3 id="4-个人信息删除权的行使"><a href="#4-个人信息删除权的行使" class="headerlink" title="4.个人信息删除权的行使"></a>4.个人信息删除权的行使</h3><p>根据《信息安全技术个人信息安全规范》第7.6条的规定，就个人信息控制者而言：</p><p>第一，符合以下情形的，个人信息主体要求删除的，应及时删除个人信息：个人信息控制者违反法律法规规定，收集、使用个人信息的；个人信息控制者违反与个人信息主体的约定，收集、使用个人信息的。 </p><p>第二，个人信息控制者违反法律法规规定或违反与个人信息主体的约定向第三方共享、转让个人信息，且个人信息主体要求删除的，个人信息控制者应立即停止共享、转让行为,并通知第三方及时删除。 </p><p>第三，个人信息控制者违反法律法规规定或与个人信息主体的约定，公开披露个人信息，且个人信息主体要求删除的，个人信息控制者应立即停止公开披露行为，并发布通知要求相关接收方删除相应的信息。</p><h3 id="5-个人信息更正权的行使"><a href="#5-个人信息更正权的行使" class="headerlink" title="5.个人信息更正权的行使"></a>5.个人信息更正权的行使</h3><p>根据《信息安全技术个人信息安全规范》第7.5条的规定，个人信息更正权行使的方法须由个人信息控制者提供，即个人信息主体发现个人信息控制者所持有的该主体的个人信息有错误或不完整的，个人信息控制者应为其提供请求更正或补充信息的方法。在《信息安全技术个人信息安全规范》附录D隐私政策模板中列举了更正个人信息更正的规范表达：“当您发现我们处理的关于您的个人信息有错误时，您有权要求我们做出更正。您可以通过‘（一）访问您的个人信息’中罗列的方式提出更正申请。如果您无法通过上述链接更正这些个人信息，您可以随时使用我们的Web表单联系，或发送电子邮件至××××。我们将在30天内回复您的更正请求。”</p><h2 id="第十一章-网络安全监测预警与应急处理制度"><a href="#第十一章-网络安全监测预警与应急处理制度" class="headerlink" title="第十一章-网络安全监测预警与应急处理制度"></a>第十一章-网络安全监测预警与应急处理制度</h2><h3 id="1-网络安全事件应急处置流程"><a href="#1-网络安全事件应急处置流程" class="headerlink" title="1.网络安全事件应急处置流程"></a>1.网络安全事件应急处置流程</h3><p>事件报告→应急响应→应急结束→调查评估</p><h3 id="2-网络安全事件应急处置组织机构与职责是什么"><a href="#2-网络安全事件应急处置组织机构与职责是什么" class="headerlink" title="2.网络安全事件应急处置组织机构与职责是什么?"></a>2.网络安全事件应急处置组织机构与职责是什么?</h3><p><strong>1.领导机构与职责</strong> </p><p>在中央网络安全和信息化领导小组的领导下，中央网络安全和信息化领导小组办公室统筹协调组织国家网络安全事件应对工作，建立健全跨部门联动处置机制；工业和信息化部、公安部、国家保密局等相关部门按照职责分工负责相关网络安全事件应对工作。必要时成立国家网络安全事件应急指挥部，负责特别重大网络安全事件处置的组织指挥和协调。 </p><p><strong>2.办事机构与职责</strong> </p><p>国家网络安全应急办公室（应急办）设在中央网信办，具体工作由中央网信办网络安全协调局承担。应急办负责网络安全应急跨部门、跨地区协调工作和指挥部的事务性工作，组织指导国家网络安全应急技术支撑队伍做好应急处置的技术支撑工作。有关部门派负责相关工作的司局级同志为联络员，联络应急办工作。</p><p> <strong>3.各部门职责</strong> </p><p>中央和国家机关各部门按照职责和权限，负责本部门、本行业网络和信息系统网络安全事件的应急处置工作。 </p><p><strong>4.各省（自治区、直辖市）职责</strong> </p><p>各省（自治区、直辖市）网信部门在本地区党委网络安全和信息化领导小组统一领导下，统筹协调组织本地区网络和信息系统网络安全事件的应急处置工作。</p><h3 id="3-网络通信临时管制措施实施的条件是什么-（详细见P253）"><a href="#3-网络通信临时管制措施实施的条件是什么-（详细见P253）" class="headerlink" title="3.网络通信临时管制措施实施的条件是什么?（详细见P253）"></a>3.网络通信临时管制措施实施的条件是什么?（详细见P253）</h3><p>（1）维护国家安全和社会稳定需要</p><p>（2）经国务院决定或批准</p><p>（3）实施区域特定</p><h2 id="第十二章-未成年人网络安全保护"><a href="#第十二章-未成年人网络安全保护" class="headerlink" title="第十二章-未成年人网络安全保护"></a>第十二章-未成年人网络安全保护</h2><h3 id="1-未成年人保护基本概念"><a href="#1-未成年人保护基本概念" class="headerlink" title="1.未成年人保护基本概念"></a>1.未成年人保护基本概念</h3><p>（1）保护的对象是未成年人</p><p>（2）保护的内容是保护未成年人免受网络侵害</p><p>（3）保护的机制是综合保护与协同治理</p><h3 id="2-阐释当前未成年人网络安全保护针对哪些具体问题"><a href="#2-阐释当前未成年人网络安全保护针对哪些具体问题" class="headerlink" title="2.阐释当前未成年人网络安全保护针对哪些具体问题"></a>2.阐释当前未成年人网络安全保护针对哪些具体问题</h3><p>（1）上网权力保障问题</p><p>（2）网络内容筛选问题</p><p>（3）网络沉迷预防问题</p><p>（4）个人信息保护问题</p><h3 id="3-归纳域外国家与地区关于未成年网络安全保护的重要经验"><a href="#3-归纳域外国家与地区关于未成年网络安全保护的重要经验" class="headerlink" title="3.归纳域外国家与地区关于未成年网络安全保护的重要经验"></a>3.归纳域外国家与地区关于未成年网络安全保护的重要经验</h3><p>（1）治理理念：疏堵兼治</p><p>（2）制度设计：法律与政策并用</p><p>（3）保护维度：全面防护</p><h3 id="4-论述将来我国未成年人网络安全保护理念及措施完善内容"><a href="#4-论述将来我国未成年人网络安全保护理念及措施完善内容" class="headerlink" title="4.论述将来我国未成年人网络安全保护理念及措施完善内容"></a>4.论述将来我国未成年人网络安全保护理念及措施完善内容</h3><p>（1）战略规划：将未成年人网络保护提升为网络空间安全战略</p><p>（2）理念倡导：吸收并倡导未成年人网络安全保护的主流理念</p><p>（3）立法先行：日益强化未成年人网络安全保护专门立法策略</p><p>（4）教育投入：不断深化未成年人网络素养教育多元协同体系</p><p>（5）组织创设：组建未成年人网络安全保护的文明志愿者队伍</p><p>（6）社会治理：有效构建未成年人网络安全保护的社会治理机制</p><p>（7）国际合作：开展未成年人网络安全保护的国际交流合作</p><h2 id="第十三章-网络安全技术标准"><a href="#第十三章-网络安全技术标准" class="headerlink" title="第十三章-网络安全技术标准"></a>第十三章-网络安全技术标准</h2><h3 id="1-网络安全技术标准的意义（P296）"><a href="#1-网络安全技术标准的意义（P296）" class="headerlink" title="1.网络安全技术标准的意义（P296）"></a>1.网络安全技术标准的意义（P296）</h3><p>（1）网络安全法律体系的重要组成部分</p><p>（2）保障网络安全的重要技术规范</p><p>（3）网络安全监管执法的重要依据</p><h3 id="2-网络安全技术标准的应用"><a href="#2-网络安全技术标准的应用" class="headerlink" title="2.网络安全技术标准的应用"></a>2.网络安全技术标准的应用</h3><p>（1）网络产品和服务提供商</p><p>对于在我国境内生产经营的网络产品和服务提供商而言,务必保证所提供的网络产品和服务完全符合国家的强制性标准；如果想要把网络产品和服务打进国际市场，就必须要符合相应的国际标准，此外，网络运营者如果参与网络安全标准的制定、通过相关的网络安全认证，也更容易获得用户信任，提高厂商形象，扩大市场份额。</p><p>（2）管理人员</p><p>当政府，企业需要建立和实施信息安全管理体系时，管理人员可以移植改造国际上已经非常成熟的信息安全管理体系</p><p>（3）技术人员</p><p>对于技术人员而言，在企业需要进行网络安全合规或者接收网络安全产品评测，网络安全检查和审计时，必然要对相关的网络安全技术标准熟悉明了，才能够完成好工作。同时，了解信息安全标准的动态可以站在信息安全产业的前沿，有助于技术人员把握信息安全产业整体的发展方向。</p><p>（4）采购人员或普通大众</p><p>有助于采购人员和普通大众选择更好的安全产品，了解评测标准则可以科学评估系统的安全性。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年蓝桥杯网安赛项部分wp</title>
    <link href="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/"/>
    <url>/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年蓝桥杯网安赛项部分wp"><a href="#2024年蓝桥杯网安赛项部分wp" class="headerlink" title="2024年蓝桥杯网安赛项部分wp"></a>2024年蓝桥杯网安赛项部分wp</h1><p>题目确实是偏简单，适合全站佬打&#x2F;(ㄒoㄒ)&#x2F;~~</p><h3 id="packet"><a href="#packet" class="headerlink" title="packet"></a>packet</h3><p>分析流量包，发现是flag是base64加密</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427091334785.png" class="" title="image-20240427091334785"><p>解密即可</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427091419710.png" class="" title="image-20240427091419710"><p>flag{7d6f17a4-2b0a-467d-8a42-66750368c249}</p><h3 id="CC"><a href="#CC" class="headerlink" title="CC"></a>CC</h3><p>用赛博厨子逆着求回去即可</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427092607848.png" class="" title="image-20240427092607848"><p>flag{6500e76e-15fb-42e8-8f29-a309ab73ba38}</p><h3 id="爬虫协议"><a href="#爬虫协议" class="headerlink" title="爬虫协议"></a>爬虫协议</h3><p>直接访问robots.txt文件，得到关键目录&#x2F;15b8a98d5daaa78e7b36f122581930a2&#x2F;</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427093747742.png" class="" title="image-20240427093747742"><p>成功访问</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427093828337.png" class="" title="image-20240427093828337"><p>点进去查看文件即是flag</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427093847546.png" class="" title="image-20240427093847546"><p>flag{5935303c-55a6-4d00-8675-f3422a53d456}</p><h2 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h2><p>签到题，工具秒解(这里应该是非预期了，n可以直接被分解)</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427120305217.png" class="" title="image-20240427120305217"><p>flag{5f00e1b9-2933-42ad-b4e1-069f6aa98e9a}</p><h2 id="缺失的数据"><a href="#缺失的数据" class="headerlink" title="缺失的数据"></a>缺失的数据</h2><p>题目给了一个压缩包，内含一个压缩包以及一张图片</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427181146453.png" class="" title="image-20240427181146453"><p>首先看下给的py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WaterMarkDWT</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, origin: <span class="hljs-built_in">str</span>, watermark: <span class="hljs-built_in">str</span>, key: <span class="hljs-built_in">int</span>, weight: <span class="hljs-built_in">list</span></span>):<br>        self.key = key<br>        self.img = cv2.imread(origin)<br>        self.mark = cv2.imread(watermark)<br>        self.coef = weight<br> <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arnold</span>(<span class="hljs-params">self, img</span>):<br>        r, c = img.shape<br>        p = np.zeros((r, c), np.uint8)<br> <br>        a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.key):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):  <br>                    x = (i + b * j) % r<br>                    y = (a * i + (a * b + <span class="hljs-number">1</span>) * j) % c<br>                    p[x, y] = img[i, j]<br>        <span class="hljs-keyword">return</span> p<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deArnold</span>(<span class="hljs-params">self, img</span>):<br>        r, c = img.shape<br>        p = np.zeros((r, c), np.uint8)<br> <br>        a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.key):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c): <br>                        x = ((a * b + <span class="hljs-number">1</span>) * i - b * j) % r<br>                        y = (-a * i + j) % c<br>                    p[x, y] = img[i, j]<br>        <span class="hljs-keyword">return</span> p<br> <br><br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, size: <span class="hljs-built_in">tuple</span> = (<span class="hljs-params"><span class="hljs-number">1200</span>, <span class="hljs-number">1200</span></span>), flag: <span class="hljs-built_in">int</span> = <span class="hljs-literal">None</span></span>):<br>        img = cv2.resize(self.img, size)<br> <br>        img1 = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)<br>        img2 = cv2.cvtColor(self.mark, cv2.COLOR_RGB2GRAY)<br> <br>        c = pywt.wavedec2(img2, <span class="hljs-string">&#x27;db2&#x27;</span>, level=<span class="hljs-number">3</span>)<br>        [cl, (cH3, cV3, cD3), (cH2, cV2, cD2), (cH1, cV1, cD1)] = c<br> <br>        d = pywt.wavedec2(img1, <span class="hljs-string">&#x27;db2&#x27;</span>, level=<span class="hljs-number">3</span>)<br>        [dl, (dH3, dV3, dD3), (dH2, dV2, dD2), (dH1, dV1, dD1)] = d<br> <br>        a1, a2, a3, a4 = self.coef<br> <br>        ca1 = (cl - dl) * a1<br>        ch1 = (cH3 - dH3) * a2<br>        cv1 = (cV3 - dV3) * a3<br>        cd1 = (cD3 - dD3) * a4<br> <br>        waterImg = pywt.waverec2([ca1, (ch1, cv1, cd1)], <span class="hljs-string">&#x27;db2&#x27;</span>)<br>        waterImg = np.array(waterImg, np.uint8)<br> <br>        waterImg = self.deArnold(waterImg)<br> <br>        kernel = np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), np.uint8)<br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>            waterImg = cv2.erode(waterImg, kernel)<br>        <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">1</span>:<br>            waterImg = cv2.dilate(waterImg, kernel)<br> <br>        cv2.imwrite(<span class="hljs-string">&#x27;水印.png&#x27;</span>, waterImg)<br>        <span class="hljs-keyword">return</span> waterImg<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    img = <span class="hljs-string">&#x27;a.png&#x27;</span><br>    k = <span class="hljs-number">20</span><br>    xs = [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>]<br>    W1 = WaterMarkDWT(img, waterImg, k, xs)<br></code></pre></td></tr></table></figure><p>看得出来是利用了两张图片进行了一些操作，代码中的a.png我们在另外一个压缩包里发现，但是压缩包有密码</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427181317927.png" class="" title="image-20240427181317927"><p>尝试解压只能解压出secret.txt文件，打开后是密码本</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427181428825.png" class="" title="image-20240427181428825"><p>用该密码本对压缩包进行爆破，成功得到解压密码pavilion</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427181541238.png" class="" title="image-20240427181541238"><p>成功打开压缩包得到图片</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427181626317.png" class="" title="image-20240427181626317"><p>回到上述lose.py代码本身，直接运行会报错，尝试补全代码，代码中有加解密部分，直接调用解密部分即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> pywt<br><span class="hljs-keyword">import</span> xlrd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WaterMarkDWT</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, origin: <span class="hljs-built_in">str</span>, watermark: <span class="hljs-built_in">str</span>, key: <span class="hljs-built_in">int</span>, weight: <span class="hljs-built_in">list</span></span>):<br>        self.key = key<br>        self.img = cv2.imread(origin)<br>        self.mark = cv2.imread(watermark)<br>        self.coef = weight<br> <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arnold</span>(<span class="hljs-params">self, img</span>):<br>        r, c = img.shape<br>        p = np.zeros((r, c), np.uint8)<br> <br>        a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.key):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):  <br>                    x = (i + b * j) % r<br>                    y = (a * i + (a * b + <span class="hljs-number">1</span>) * j) % c<br>                    p[x, y] = img[i, j]<br>        <span class="hljs-keyword">return</span> p<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deArnold</span>(<span class="hljs-params">self, img</span>):<br>        r, c = img.shape<br>        p = np.zeros((r, c), np.uint8)<br> <br>        a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.key):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c): <br>                        x = ((a * b + <span class="hljs-number">1</span>) * i - b * j) % r<br>                        y = (-a * i + j) % c<br>                        p[x, y] = img[i, j]<br>        <span class="hljs-keyword">return</span> p<br> <br><br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, size: <span class="hljs-built_in">tuple</span> = (<span class="hljs-params"><span class="hljs-number">1200</span>, <span class="hljs-number">1200</span></span>), flag: <span class="hljs-built_in">int</span> = <span class="hljs-literal">None</span></span>):<br>        img = cv2.resize(self.img, size)<br> <br>        img1 = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)<br>        img2 = cv2.cvtColor(self.mark, cv2.COLOR_RGB2GRAY)<br> <br>        c = pywt.wavedec2(img2, <span class="hljs-string">&#x27;db2&#x27;</span>, level=<span class="hljs-number">3</span>)<br>        [cl, (cH3, cV3, cD3), (cH2, cV2, cD2), (cH1, cV1, cD1)] = c<br> <br>        d = pywt.wavedec2(img1, <span class="hljs-string">&#x27;db2&#x27;</span>, level=<span class="hljs-number">3</span>)<br>        [dl, (dH3, dV3, dD3), (dH2, dV2, dD2), (dH1, dV1, dD1)] = d<br> <br>        a1, a2, a3, a4 = self.coef<br> <br>        ca1 = (cl - dl) * a1<br>        ch1 = (cH3 - dH3) * a2<br>        cv1 = (cV3 - dV3) * a3<br>        cd1 = (cD3 - dD3) * a4<br> <br>        waterImg = pywt.waverec2([ca1, (ch1, cv1, cd1)], <span class="hljs-string">&#x27;db2&#x27;</span>)<br>        waterImg = np.array(waterImg, np.uint8)<br> <br>        waterImg = self.deArnold(waterImg)<br> <br>        kernel = np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), np.uint8)<br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>            waterImg = cv2.erode(waterImg, kernel)<br>        <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">1</span>:<br>            waterImg = cv2.dilate(waterImg, kernel)<br> <br>        cv2.imwrite(<span class="hljs-string">&#x27;水印.png&#x27;</span>, waterImg)<br>        <span class="hljs-keyword">return</span> waterImg<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    img = <span class="hljs-string">&#x27;a.png&#x27;</span><br>    waterImg=<span class="hljs-string">&#x27;newImg.png&#x27;</span><br>    k = <span class="hljs-number">20</span><br>    xs = [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>]<br>    W1 = WaterMarkDWT(img, waterImg, k, xs)<br>    W1.get()//调用解密部分<br></code></pre></td></tr></table></figure><p>运行后生成带有flag 的图片</p><img src="/2024/04/27/2024%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E5%AE%89%E8%B5%9B%E9%A1%B9/image-20240427181819504.png" class="" title="image-20240427181819504">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024数信杯部分wp</title>
    <link href="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/"/>
    <url>/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年数信杯部分wp"><a href="#2024年数信杯部分wp" class="headerlink" title="2024年数信杯部分wp"></a>2024年数信杯部分wp</h1><p>菜的一批，做了几道取证还有一道合约题，合约没怎么接触过 ，后续有时间去学习下😭😭</p><h4 id="不安全的U盘-1"><a href="#不安全的U盘-1" class="headerlink" title="不安全的U盘.1"></a>不安全的U盘.1</h4><p>vol的插件直接出，hahaha123</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f WIN-T89OD3C9LOC-20231229-081734.raw --profile=Win7SP1x64 mimikatz <br></code></pre></td></tr></table></figure><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240414151113304.png" class="" title="image-20240414151113304"><h4 id="不安全的U盘-2"><a href="#不安全的U盘-2" class="headerlink" title="不安全的U盘.2"></a><strong>不安全的U盘.2</strong></h4><p>沙箱分析一下(这里用的微步)，看到关联文件AcroRd32.exe</p><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240414151302159.png" class="" title="image-20240414151302159"><p>vol2查找一下该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f WIN-T89OD3C9LOC-20231229-081734.raw --profile=Win7SP1x64 filescan |grep <span class="hljs-string">&quot;AcroRd32.exe&quot;</span><br></code></pre></td></tr></table></figure><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240414151643373.png" class="" title="image-20240414151643373"><p>文件地址就是：C:\Program Files (x86)\Adobe\Reader 9.0\Reader\AcroRd32.exe，把空格去除后就是flag</p><h4 id="不安全的U盘-3"><a href="#不安全的U盘-3" class="headerlink" title="不安全的U盘.3"></a><strong>不安全的U盘.3</strong></h4><p>用netscan查看一下网络连接情况，对应题2中的恶意文件AcroRd32.exe的地址就是答案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f WIN-T89OD3C9LOC-20231229-081734.raw netscan --profile=Win7SP1x64 <br></code></pre></td></tr></table></figure><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240414112053966.png" class="" title="image-20240414112053966"><p>192.168.31.238:4444</p><h4 id="不安全的U盘-4"><a href="#不安全的U盘-4" class="headerlink" title="不安全的U盘.4"></a><strong>不安全的U盘.4</strong></h4><p>首先查找镜像中所有exe文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f WIN-T89OD3C9LOC-20231229-081734.raw --profile=Win7SP1x64 filescan |grep <span class="hljs-string">&quot;.exe&quot;</span> <br></code></pre></td></tr></table></figure><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240415094652110.png" class="" title="image-20240415094652110"><p>尝试了多次后，发现在Music文件夹目录下，有一个f.exe,尝试查询同目录下文件，在这里发现了c.toml</p><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240415094828820.png" class="" title="image-20240415094828820"><p>将该文件下载下来进行分析，打开后成功发现外联地址以及账户信息</p><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240415095115994.png" class="" title="image-20240415095115994"><p>所以最后答案就是 118.180.126.13_6770</p><h4 id="Bitcoin-2"><a href="#Bitcoin-2" class="headerlink" title="Bitcoin.2"></a>Bitcoin.2</h4><p>这题是赛后参考LVV攻防取证的文章复现的，大家可以微信搜索他们公众号看原文章，这里先用FTK Imager挂载上ad1镜像</p><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240415101521272.png" class="" title="image-20240415101521272"><p>这是使用了一个findwallet工具,首先安装该工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install findwallet -g<br></code></pre></td></tr></table></figure><p>在镜像目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">findwallet -i.<br></code></pre></td></tr></table></figure><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240415101716670.png" class="" title="image-20240415101716670"><p>补全全部路径后就是 C:\Windows\System32&#x2F;config&#x2F;systemprofile&#x2F;AppData&#x2F;Roaming&#x2F;Microsoft&#x2F;SystemCertificates&#x2F;My&#x2F;AppContainerUserCertRead.sys</p><h4 id="Bitcoin-4"><a href="#Bitcoin-4" class="headerlink" title="Bitcoin.4"></a><strong>Bitcoin.4</strong></h4><p>题目给出来一个ad1镜像文件以及一个CTF.SOL源码文件，简单分析源码文件中主要内容,下面这段代码有些问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) &#123;<br>    require(msg.sender == owner);<br>    return super.transferFrom(from, to, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>transferFrom的实现引入了一项严重的限制：这里的require(msg.sender &#x3D;&#x3D; owner);要求只有合约的owner能调用此函数。这阻止了授权用户使用他们被授权转移的代币。这实际上赋予了合约所有者对任何人代币的完全控制权，只要之前有过授权。</p><p>答案直接输transferFrom</p><h4 id="网站的数据绝对安全1"><a href="#网站的数据绝对安全1" class="headerlink" title="网站的数据绝对安全1"></a>网站的数据绝对安全1</h4><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/wps1.jpg" class="" title="img"> <p>看登录逻辑，当code为1时用户不存在，查找code不为1的用户 ：</p><img src="/2024/04/14/2024%E5%B9%B4%E6%95%B0%E4%BF%A1%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20240414161851987.png" class="" title="image-20240414161851987"><p>Livwdaw用户为2，此用户存在。</p><h4 id="rrrcccc"><a href="#rrrcccc" class="headerlink" title="rrrcccc"></a>rrrcccc</h4><p>1、 手动脱壳</p><p>2、 把004012BD处地址的jzpatch成jmp以绕过反调试</p><p>3、 Dump密钥流，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">cip = <span class="hljs-string">b&quot;Whatareyourencryption&amp;decryptionbasics&quot;</span><br><br>key1 = <span class="hljs-built_in">bytearray</span>([<span class="hljs-number">0x0000001C</span>, <span class="hljs-number">0x000000CB</span>, <span class="hljs-number">0x000000F5</span>, <span class="hljs-number">0x00000053</span>, <span class="hljs-number">0x00000091</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x0000003B</span>, <span class="hljs-number">0x00000066</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x0000007D</span>, <span class="hljs-number">0x000000BA</span>, <span class="hljs-number">0x000000D2</span>, <span class="hljs-number">0x00000056</span>, <span class="hljs-number">0x000000CE</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x000000A4</span>, <span class="hljs-number">0x000000E8</span>, <span class="hljs-number">0x0000007F</span>, <span class="hljs-number">0x000000C2</span>, <span class="hljs-number">0x000000C4</span>, <span class="hljs-number">0x0000002B</span>, <span class="hljs-number">0x00000086</span>, <span class="hljs-number">0x00000032</span>, <span class="hljs-number">0x000000F0</span>, <span class="hljs-number">0x000000F7</span>, <span class="hljs-number">0x000000EA</span>, <span class="hljs-number">0x000000FB</span>, <span class="hljs-number">0x000000F0</span>, <span class="hljs-number">0x00000078</span>, <span class="hljs-number">0x00000034</span>, <span class="hljs-number">0x0000009A</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x000000A2</span>, <span class="hljs-number">0x00000091</span>, <span class="hljs-number">0x00000037</span>, <span class="hljs-number">0x00000048</span>, <span class="hljs-number">0x00000066</span>])<br><br>key2 = <span class="hljs-built_in">bytearray</span>([<span class="hljs-number">0x2d</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x9</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0xa6</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-number">0xae</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0xc5</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x68</span>])<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">38</span>):<br><br>  flag += <span class="hljs-built_in">chr</span>(cip[i] ^ key1[i] ^ key2[i])<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>得到flag：</p><p>flag{d3db69a34a51d7e1d23d621590827c01}</p><h4 id="drinktea"><a href="#drinktea" class="headerlink" title="drinktea"></a>drinktea</h4><p>1、 结合chatgpt分析字节码</p><p>2、 写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">void decipher(unsigned <span class="hljs-built_in">int</span> num_rounds, uint32_t v[<span class="hljs-number">2</span>], uint32_t const key[<span class="hljs-number">4</span>]) &#123;  <br>    unsigned <span class="hljs-built_in">int</span> i;  <br>    uint32_t v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], delta=<span class="hljs-number">0x21222324</span>, <span class="hljs-built_in">sum</span>=delta*num_rounds;  <br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; num_rounds; i++) &#123;  <br>    <br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (<span class="hljs-built_in">sum</span> + key[(<span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);   <br>        <span class="hljs-built_in">sum</span> -= delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1)  ^ (<span class="hljs-built_in">sum</span> + key[<span class="hljs-built_in">sum</span> &amp; <span class="hljs-number">3</span>]);    <br>    &#125;  <br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;  <br>    <br><br>&#125;  <br>void xTea()<br>&#123;<br>unsigned <span class="hljs-built_in">int</span> r=<span class="hljs-number">32</span>;<br><br>uint32_t cip[] = &#123;<span class="hljs-number">392252415</span>,<span class="hljs-number">2941946969</span>,<span class="hljs-number">1122976151</span>,<span class="hljs-number">1335193774</span>,<span class="hljs-number">815478816</span>,<span class="hljs-number">2529100980</span>,<span class="hljs-number">2237049875</span>,<span class="hljs-number">188954780</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i+=<span class="hljs-number">2</span>)&#123;<br>uint32_t v[<span class="hljs-number">2</span>] = &#123;cip[i],cip[i+<span class="hljs-number">1</span>]&#125;; <br>    uint32_t const k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1900550021</span>,<span class="hljs-number">2483099539</span>,<span class="hljs-number">2205172504</span>,<span class="hljs-number">1359557939</span>&#125;;  <br>    <br>    decipher(r, v, k);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,v[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x000000ff</span>);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,(v[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x0000ff00</span>) &gt;&gt; <span class="hljs-number">8</span>);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,(v[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt; <span class="hljs-number">16</span>);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,(v[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xff000000</span>) &gt;&gt; <span class="hljs-number">24</span>);<br><br>printf(<span class="hljs-string">&quot;%c&quot;</span>,v[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x000000ff</span>);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,(v[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0000ff00</span>) &gt;&gt; <span class="hljs-number">8</span>);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,(v[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt; <span class="hljs-number">16</span>);<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,(v[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xff000000</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-built_in">int</span> main()&#123;<br>xTea();<br>&#125;<br></code></pre></td></tr></table></figure><p>拿到flag:  acb8739759dc496ccc945703037e037f</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玄机_第二章日志分析-apache日志分析wp</title>
    <link href="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <url>/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="玄机-第二章日志分析-apache日志分析"><a href="#玄机-第二章日志分析-apache日志分析" class="headerlink" title="玄机_第二章日志分析-apache日志分析"></a>玄机_第二章日志分析-apache日志分析</h1><p>玄机的题目用来练习应急响应是相当不错的，今天也跟平台负责人聊了下，后续可能会出病毒样本分析，值得期待。</p><p>平台地址：<a href="https://xj.edisec.net/">https://xj.edisec.net/</a></p><img src="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/Untitled.png" class="" title="Untitled"><p><strong><code>题目一：提交当天访问次数最多的IP，即黑客IP</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -d- -f 1 access.log.1|<span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -rn | <span class="hljs-built_in">head</span> -20<br></code></pre></td></tr></table></figure><img src="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/Untitled%201.png" class="" title="Untitled"><p>flag{192.168.200.2}</p><p><strong><code>题目二：黑客使用的浏览器指纹是什么，提交指纹的md5</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> access.log.1 |grep <span class="hljs-string">&quot;192.168.200.2&quot;</span><br></code></pre></td></tr></table></figure><img src="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/Untitled%202.png" class="" title="Untitled"><p>得到浏览器指纹如下：<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</code></p><p>md5后得到flag{2d6330f380f44ac20f3a02eed0958f66}</p><p><strong><code>题目三：查看index.php页面被访问的次数，提交次数</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;/index.php&quot;</span> access.log.1 |<span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><img src="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/Untitled%203.png" class="" title="Untitled"><p>flag{27}</p><p><strong><code>题目四：查看黑客IP访问了多少次，提交次数</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#x27;</span> access.log.1<br></code></pre></td></tr></table></figure><img src="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/Untitled%204.png" class="" title="Untitled"><p>flag{6555}</p><p><strong><code>题目五：查看2023年8月03日8时这一个小时内有多少IP访问，提交次数</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> access.log.1 | grep <span class="hljs-string">&quot;03/Aug/2023:08:&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> -nr| <span class="hljs-built_in">uniq</span> -c<br></code></pre></td></tr></table></figure><img src="/2024/03/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/Untitled%205.png" class="" title="Untitled"><p>flag{5}</p>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曲star网络安全技能竞赛官方题解(密码#取证部分)</title>
    <link href="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>在上学期期末就想筹办这次面向学院新生的比赛了，寒假里跟社团的同学们出了题，基本也是面向0基础，以引导和兴趣为主，绝大部分题目都能通过现场学习或者利用搜索引擎就能解决，实际参赛人数大约三十人，也算符合预期，本次比赛使用的平台是GZCTF，github地址为：<a href="https://github.com/GZTimeWalker/GZCTF?tab=readme-ov-file">https://github.com/GZTimeWalker/GZCTF?tab=readme-ov-file</a></p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/4a32a91ed7dfa6bbfff254e88d926a14_720.jpg" class="" title="4a32a91ed7dfa6bbfff254e88d926a14_720"><hr><h3 id="二、取证部分"><a href="#二、取证部分" class="headerlink" title="二、取证部分"></a>二、取证部分</h3><p>取证部分直接使用了beginCTF的取证原题，主要是为了让参赛人员熟悉取证工具的常见使用以及命令，以下为题目解答。</p><p><strong>题目一：cmd里的密码</strong></p><p>题目描述：你知道cmd里藏着什么信息吗？</p><p>附件是一个raw镜像文件，用volatility分析下，题目提示查看cmd，这里使用cmdscan看一下，得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f hello.raw --profile=Win7SP1x64 cmdscan<br></code></pre></td></tr></table></figure><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214164917935.png" class="" title="image-20240214164917935"><p>得到第一题flag:flag{Cmd_1in3_109_i5_imp0rt@nt}</p><p><strong>题目二：浏览器里的机密</strong></p><p>题目描述：你知道小谢的IE浏览器里藏着什么秘密吗？</p><p>用iehistory查看一下ie浏览其里的记录，寻找包含flag字符的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f hello.raw --profile=Win7SP1x64 iehistory |grep <span class="hljs-string">&quot;flag&quot;</span><br></code></pre></td></tr></table></figure><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214165723407.png" class="" title="image-20240214165723407"><p>得到flag,解一下url码即可</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214165752647.png" class="" title="image-20240214165752647"><p>得到第二题的flag:flag{Y0v_c@n_g3t_th3_i3hi5t0ry}</p><p><strong>题目三：计算机的密码</strong></p><p>题目描述：你知道这台计算机的密码是什么吗？</p><p>这里使用volatility的一个插件mimikatz，可以查看明文密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f hello.raw --profile=Win7SP1x64 mimikatz<br></code></pre></td></tr></table></figure><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214170207963.png" class="" title="image-20240214170207963"><p><strong>题目四：机密文件要妥善保存</strong></p><p>题目描述：你知道机密文件里是什么吗？</p><p>首先用filescan文件搜索下包含“机密”二字的文件，发现机密文件.docx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f hello.raw --profile=Win7SP1x64 filescan |grep <span class="hljs-string">&quot;机密&quot;</span><br></code></pre></td></tr></table></figure><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214170646304.png" class="" title="image-20240214170646304"><p>将该文件提取出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f hello.raw --profile=Win7SP1x64 dumpfiles -Q <span class="hljs-string">&quot;0x000000001e742dd0&quot;</span> -D ./<br></code></pre></td></tr></table></figure><p>将提取出来的文件的后缀名改为docx</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214171025827.png" class="" title="image-20240214171025827"><p>打开后是flag</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240214171104212.png" class="" title="image-20240214171104212"><p>第四个题目的flag为：flag{Y0v_c@n_d0vvn_th3_fi13}</p><hr><h3 id="三、密码部分"><a href="#三、密码部分" class="headerlink" title="三、密码部分"></a>三、密码部分</h3><p>密码一共三道，一道摩斯密码作为签到题，一道RSA基本原理，一道共模攻击。</p><p><strong>题目一：一串信息</strong></p><p>题目描述：小吴同学收到了小严同学的一段信息–.- ..-. -. ..- -.-. - ..-. —-.– – — … . -.-. — -.. . .- -. -.. –.- ..-. -. ..- —–.- ，他似乎不明白这段信息是什么意思，你知道吗？该题答案为：QFNUCTF{XXXXX}格式</p><p>题目解答：摩斯密码，直接翻译即可</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240216181613925.png" class="" title="image-20240216181613925"><p>得到flag:QFNUCTF{MOSECODEANDQFNU}</p><p><strong>题目二：RSA基本原理</strong></p><p>题目描述：小明正在学习RSA的基本知识，他得到了n&#x3D;143,公钥e&#x3D;17,私钥d&#x3D;113,密文为7，请你帮助小明获得原始明文，并将结果填写在qfnuctf{}的花括号里提交。</p><p>该题主要是RSA考察对于RSA基本原理的理解与运用，以下为基本原理</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240216180052857.png" class="" title="image-20240216180052857"><p>以下为具体解题</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240216180138616.png" class="" title="image-20240216180138616"><p>qfnuctf{24}</p><p><strong>题目三：两个模数居然一样</strong></p><p>题目给出了一个加密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag  = <span class="hljs-string">&#x27;qfnuctf&#123;hello,qfnu&#125;&#x27;</span> <span class="hljs-comment"># 这个肯定不是答案了，只是一个示例，不要交这个,要根据下面给出的flag1和flag2以及n求出对应的明文</span><br>p = getPrime(<span class="hljs-number">2048</span>)<br>q = getPrime(<span class="hljs-number">2048</span>)<br>m1 = bytes_to_long(<span class="hljs-built_in">bytes</span>(flag.encode()))<br>e1 = <span class="hljs-number">3247473589</span><br>e2 = <span class="hljs-number">3698409173</span><br>n = p*q<br>flag1 = <span class="hljs-built_in">pow</span>(m1,e1,n)<br>flag2 = <span class="hljs-built_in">pow</span>(m1,e2,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag1= &#x27;</span>+<span class="hljs-built_in">str</span>(flag1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag2= &#x27;</span>+<span class="hljs-built_in">str</span>(flag2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n= &#x27;</span>+<span class="hljs-built_in">str</span>(n))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag1= 375531898324321471720276787550693405944926126074533547871726457883520732075620336069698857856349767664110389234477936422812925551469947327230796475752752365747197075480396612109822690188816688534399231865889556921451532725271583005108409229113944302315960931452929768251965640072110136102810998803100270218289251314659764774405406406988875146910237333363258769870380386888063205712300117496808733178958665710960491352026882287626847563989698956075137611669927719077503029982078413515205145304087031281605244105848220755240710878523808281328701403465271357430927213451816086891502144199080263492955880118962309993091551784475480740704257954846758374594335116928093215990058427922931698414662789611585418374419001168192496352546942821679686569748514504858975280245937201976509599956219190070640722931910159891202376082602443078846876984561899775922609349952247267796907855404089551129077389329814043879192978645573649434983407084557725507168477407375979769075982703647744127720830270317403150148131275275281286997098656934538006529189371500425435164054480555059096362975409721702119543817142051199845303827671388034067147423958885812893295007047923059156622871206229236615649171793656406796341049374868687711781234013416309675891307393</span><br><span class="hljs-string">flag2= 347591103961120163519107479578764214646041926413580555921159034808799870859889507753720728589433273505124714076032185220813048552551271584771491650929245328237008883292756541687815702971199316989760860749066080758758827018661577218547597408893337410798777668369804774304516176578153390589249487773512116827667657113488826983019377203340309252099510872045559551137373937325447429868374589521025053510239282106081163136832224246458779559759558373217250858660047257353245823261531401744549892306453820531695020998680690958073028841354348536865781772305543438754053015770323099185706446441666603747389239938097575151185364684441585874525071636770258542349489265858772362316496440677775731726379341649443606870446049613431463842139155717712075683837006161101837841578652633446715854122799145591772417956444791396928022576214067381677702738954768960851229529533511975247574089188689995389417019807413139692910072698555700059983250689413419637131090024392474447894106812168336764880767084946057906002241591741598461457549990128368226663606985971290455997273202401924270593570485441285973258452624585311481046537643750900668689225577788158229821349917707601260273910477451314295521607572807141522450541704779844827335255929420213962845246185</span><br><span class="hljs-string">n= 473275489029574638227360931977793769470308219432883099013327733301445152285261672921313657317871422673496221314887066162284446626669720855498318879954358242513041418445599774640710149374769262729259493139698543069750213915625095291356772867827036300615016019069982040583630694317495477861977319590186381830468720658186347785230915864966308588258214486551896739303207203631040253414216850163902961534646144295821301945582759471754456372150563656012996951440986751347448436869638095328249525060956231983813147936851326017622197290141130813278191126734383433932751060759382005551034191430225589686890940877994057755039654383769066562050178553766128537516863289554375480984166091878421759112028273277205531813239101314779956020296798495612918172012397942175311032523132636063018157282111976981428941747584546118026130690082000531879570679739004530802936449323414423719764039191211136945878711917758594883618778475227076142998123391660063308633443844638436088446216518624403872463563266395926494540743405224869421500514559568453345227620643169712527100425481129519020528530466477990923100938142585116275469712624846477228365578980471685615099143974039791920276696717966458176113232016618706653056230008032584637485489718087281212118215867</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>两个加密使用的模数一样，考虑共模攻击，原理解析可参考：<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/</a></p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br>n=<span class="hljs-number">473275489029574638227360931977793769470308219432883099013327733301445152285261672921313657317871422673496221314887066162284446626669720855498318879954358242513041418445599774640710149374769262729259493139698543069750213915625095291356772867827036300615016019069982040583630694317495477861977319590186381830468720658186347785230915864966308588258214486551896739303207203631040253414216850163902961534646144295821301945582759471754456372150563656012996951440986751347448436869638095328249525060956231983813147936851326017622197290141130813278191126734383433932751060759382005551034191430225589686890940877994057755039654383769066562050178553766128537516863289554375480984166091878421759112028273277205531813239101314779956020296798495612918172012397942175311032523132636063018157282111976981428941747584546118026130690082000531879570679739004530802936449323414423719764039191211136945878711917758594883618778475227076142998123391660063308633443844638436088446216518624403872463563266395926494540743405224869421500514559568453345227620643169712527100425481129519020528530466477990923100938142585116275469712624846477228365578980471685615099143974039791920276696717966458176113232016618706653056230008032584637485489718087281212118215867</span><br>e1 = <span class="hljs-number">3247473589</span><br>e2 = <span class="hljs-number">3698409173</span><br>c1=<span class="hljs-number">375531898324321471720276787550693405944926126074533547871726457883520732075620336069698857856349767664110389234477936422812925551469947327230796475752752365747197075480396612109822690188816688534399231865889556921451532725271583005108409229113944302315960931452929768251965640072110136102810998803100270218289251314659764774405406406988875146910237333363258769870380386888063205712300117496808733178958665710960491352026882287626847563989698956075137611669927719077503029982078413515205145304087031281605244105848220755240710878523808281328701403465271357430927213451816086891502144199080263492955880118962309993091551784475480740704257954846758374594335116928093215990058427922931698414662789611585418374419001168192496352546942821679686569748514504858975280245937201976509599956219190070640722931910159891202376082602443078846876984561899775922609349952247267796907855404089551129077389329814043879192978645573649434983407084557725507168477407375979769075982703647744127720830270317403150148131275275281286997098656934538006529189371500425435164054480555059096362975409721702119543817142051199845303827671388034067147423958885812893295007047923059156622871206229236615649171793656406796341049374868687711781234013416309675891307393</span><br>c2=<span class="hljs-number">347591103961120163519107479578764214646041926413580555921159034808799870859889507753720728589433273505124714076032185220813048552551271584771491650929245328237008883292756541687815702971199316989760860749066080758758827018661577218547597408893337410798777668369804774304516176578153390589249487773512116827667657113488826983019377203340309252099510872045559551137373937325447429868374589521025053510239282106081163136832224246458779559759558373217250858660047257353245823261531401744549892306453820531695020998680690958073028841354348536865781772305543438754053015770323099185706446441666603747389239938097575151185364684441585874525071636770258542349489265858772362316496440677775731726379341649443606870446049613431463842139155717712075683837006161101837841578652633446715854122799145591772417956444791396928022576214067381677702738954768960851229529533511975247574089188689995389417019807413139692910072698555700059983250689413419637131090024392474447894106812168336764880767084946057906002241591741598461457549990128368226663606985971290455997273202401924270593570485441285973258452624585311481046537643750900668689225577788158229821349917707601260273910477451314295521607572807141522450541704779844827335255929420213962845246185</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp_def</span>(<span class="hljs-params">e1,e2,c1,c2,n</span>):<br>    s,s1,s2 = gmpy2.gcdext(e1, e2)<br>    m = (<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2 ,s2 ,n)) % n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br><br>m=exp_def(e1,e2,c1,c2,n)<br><br><span class="hljs-built_in">print</span>(libnum.n2s(m))<br><br></code></pre></td></tr></table></figure><p>运行后得到flag:qfnuctf{th1s_1s_baby_nn}</p><img src="/2024/03/16/%E6%9B%B2star%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3/image-20240316203511577.png" class="" title="image-20240316203511577">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF-Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024西湖论剑取证题目easy_rawraw</title>
    <link href="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="2024西湖论剑-easy-rawraw"><a href="#2024西湖论剑-easy-rawraw" class="headerlink" title="2024西湖论剑-easy_rawraw"></a>2024西湖论剑-easy_rawraw</h3><p>题目到手是两个附件，一个raw镜像，一个压缩包，压缩包有密码，暴力破解打不开，密码大概率是在镜像文件中。</p><p>先用volatility分析下,首先是查到一个密码das123admin321</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240208235238844.png" class="" title="image-20240208235238844"><p>在剪切板中又发现一个密码DasrIa456sAdmIn987</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209000903083.png" class="" title="image-20240209000903083"><p>在查看cmd执行了哪些进程时，发现pass.zip文件</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209002406753.png" class="" title="image-20240209002406753"><p>将pass.zip文件提取出来分析一波</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209002647806.png" class="" title="image-20240209002647806"><p>提取出来的文件为bat文件，将后缀改为zip</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209002740245.png" class="" title="image-20240209002740245"><p>压缩包解压出来后是一张图片</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209002855635.png" class="" title="image-20240209002855635"><p>010Editor分析下，里面还有东西</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003217044.png" class="" title="image-20240209003217044"><p>用binwalk分离下</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003340686.png" class="" title="image-20240209003340686"><p>又是一个zip压缩包</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003402787.png" class="" title="image-20240209003402787"><p>需要解压密码</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003502151.png" class="" title="image-20240209003502151"><p>纯数字暴力破解成功，密码为20240210</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003614986.png" class="" title="image-20240209003614986"><p>解压出来pass.txt，看着像密钥文件，先放一边，先解决另一个压缩包</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003800480.png" class="" title="image-20240209003800480"><p>这个压缩包暴力破解无果，尝试用上面得到的几个密码，填入DasrIa456sAdmIn987成功解压缩，得到一个镜像文件，尝试进行挂载</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209003955339.png" class="" title="image-20240209003955339"><p>这里选择使用前面得到的密钥文件</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209004045305.png" class="" title="image-20240209004045305"><p>成功挂载，得到xlsx表格</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209004131989.png" class="" title="image-20240209004131989"><p>打开文件需要密码，尝试用上面得到的密码，填入das123admin321成功解密</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209004157653.png" class="" title="image-20240209004157653"><p>搜索关键词发现flag</p><img src="/2024/02/08/24_0208%E5%87%A0%E4%B8%AA%E5%8F%96%E8%AF%81%E9%A2%98%E7%9B%AE/image-20240209004303665.png" class="" title="image-20240209004303665">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF-取证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HFish部署与测试</title>
    <link href="/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="HFish部署与测试"><a href="#HFish部署与测试" class="headerlink" title="HFish部署与测试"></a>HFish部署与测试</h1><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h3><p>HFish是一款社区型免费蜜罐，侧重企业安全场景，从内网失陷检测、外网威胁感知、威胁情报生产三个场景出发，为用户提供可独立操作且实用的功能，通过安全、敏捷、可靠的中低交互蜜罐增加用户在失陷感知和威胁情报领域的能力。</p><p>HFish支持基本网络 服务、OA系统、CRM系统、NAS存储系统、Web服务器、运维平台、安全产品、无线AP、交换机&#x2F;路由器、邮件系统、IoT设备等90多种蜜罐服务、支持用户制作自定义Web蜜罐、支持流量牵引到免费云蜜网、支持可开关的全端口扫描感知能力、支持可自定义的蜜饵配置、一键部署、跨平台多架构，支持Linux x32&#x2F;x64&#x2F;ARM、Windows x32&#x2F;x64平台和多种国产操作系统、支持龙芯、海光、飞腾、鲲鹏、腾云、兆芯等国产CPU、极低的性能要求、邮件&#x2F;syslog&#x2F;webhook&#x2F;企业微信&#x2F;钉钉&#x2F;飞书告警等多项特性，帮助用户降低运维成本，提升运营效率。</p><p>详情可见项目官网：<a href="https://hfish.net/">https://hfish.net/</a></p><h3 id="二-部署与配置"><a href="#二-部署与配置" class="headerlink" title="二.部署与配置"></a>二.部署与配置</h3><p>首先关闭防火墙，用于web管理与管理端通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --add-port=4433/tcp --permanent   <span class="hljs-comment">#（用于web界面启动）</span><br>firewall-cmd --add-port=4434/tcp --permanent   <span class="hljs-comment">#（用于节点与管理端通信）</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><img src="/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/image-20240115102442930-1705286751012-1.png" class="" title="image-20240115102442930"><p>使用root权限一键部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -sS -L https://hfish.net/webinstall.sh)<br></code></pre></td></tr></table></figure><img src="/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/image-20240115102511007-1705286751013-2.png" class="" title="image-20240115102511007"><p>部署完成后进行登录</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">登陆链接：<span class="hljs-link">https://</span>[<span class="hljs-string">ip</span>]:4433/web/<br>账号：admin<br>密码：HFish2021<br></code></pre></td></tr></table></figure><p>登录后即可进入管理平台</p><img src="/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/image-20240115103719825-1705286751014-3.png" class="" title="image-20240115103719825"><p>可以根据自己情况部署蜜罐，蜜网。</p><img src="/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/image-20240115104208478-1705286751014-4.png" class="" title="image-20240115104208478"><p>可以查看威胁情况。</p><img src="/2024/01/15/HFish%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E4%BD%93%E9%AA%8C/image-20240115104304055-1705286751014-5.png" class="" title="image-20240115104304055">]]></content>
    
    
    <categories>
      
      <category>安全防护</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蜜罐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些简单的近源攻击</title>
    <link href="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/"/>
    <url>/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一些简单的近源攻击"><a href="#一些简单的近源攻击" class="headerlink" title="一些简单的近源攻击"></a>一些简单的近源攻击</h1><h2 id="一-钓鱼WIFI攻击"><a href="#一-钓鱼WIFI攻击" class="headerlink" title="一.钓鱼WIFI攻击"></a>一.钓鱼WIFI攻击</h2><h3 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="(1)前置知识"></a>(1)前置知识</h3><p>钓鱼WiFi是一种网络攻击手法，通常通过模拟合法的WiFi网络来欺骗用户连接，从而窃取其敏感信息或进行其他恶意活动。攻击者会创建一个看似正常的无线网络，以引诱用户连接并输入个人信息，例如用户名、密码或信用卡信息。</p><p>攻击者可以使用各种手段创建钓鱼WiFi，包括伪造公共WiFi热点、模仿商家或机构提供的网络，或者使用社交工程手段欺骗用户。一旦用户连接到这样的网络，攻击者就能够拦截和监视其数据流量，可能导致个人隐私泄露、身份盗窃或其他不良后果。</p><p>为了防范钓鱼WiFi攻击，用户应该谨慎选择连接的WiFi网络，避免连接不熟悉的公共网络，尤其是不加密或未经验证的网络。此外，使用虚拟专用网络（VPN）等安全措施也可以提高个人网络安全性。</p><h3 id="2-所用工具"><a href="#2-所用工具" class="headerlink" title="(2)所用工具"></a>(2)所用工具</h3><p>1.可发射的无线网卡(最好是可以在kail中免驱动的)</p><p>2.攻击机kail,手机一部</p><h3 id="3-实验详细步骤"><a href="#3-实验详细步骤" class="headerlink" title="(3).实验详细步骤"></a>(3).实验详细步骤</h3><p>首先在kail中安装wifipumpkin3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install wifipumpkin3<br></code></pre></td></tr></table></figure><p>将网卡与电脑连接，注意要连进kail虚拟机中。</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114164942814.png" class="" title="image-20240114164942814"><p>使用ifconfig命令查看网卡信息。</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114165054495.png" class="" title="image-20240114165054495"><p>可以看到wlan0已经正常运行，接下来运行wifipumpkin3。</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114165221859.png" class="" title="image-20240114165221859"><p>接下来进行钓鱼wifi的相关配置，更多的配置以及插件可由同学们自行探索，作者仅作最简单的示范。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wp3 &gt; <span class="hljs-built_in">set</span> interface wlan0<span class="hljs-comment">#设置使用的网卡</span><br>wp3 &gt; <span class="hljs-built_in">set</span> ssid QFNU_free<span class="hljs-comment">#这里设置钓鱼wifi的名称</span><br>wp3 &gt; <span class="hljs-built_in">set</span> proxy noproxy<br>wp3 &gt; ignore pydns_server<br>wp3 &gt; start<span class="hljs-comment">#启动钓鱼wifi</span><br></code></pre></td></tr></table></figure><p>启动后即可等待目标连接钓鱼WIFI，在目标的手机端已经可以看到该网络。</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114171850828.png" class="" title="image-20240114171850828"><p>目标连接钓鱼WIFI网络QFNU_free,目标连接钓鱼WiFi后网路连接正常。</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114172024753.png" class="" title="image-20240114172024753"><p>我们在攻击者这段可以看到目标的一些访问数据，成功完成本次钓鱼wifi攻击。</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114171816537.png" class="" title="image-20240114171816537"><p>参考文章：<a href="https://www.freebuf.com/articles/wireless/269933.html">https://www.freebuf.com/articles/wireless/269933.html</a></p><h2 id="二-WIIF暴力破解实验"><a href="#二-WIIF暴力破解实验" class="headerlink" title="二.WIIF暴力破解实验"></a>二.WIIF暴力破解实验</h2><h3 id="1-前置知识-1"><a href="#1-前置知识-1" class="headerlink" title="(1)前置知识"></a>(1)前置知识</h3><p>普通的无线路由器，加密方法一般使用wpa 、wpa2或wep，wep因为太不安全极易被破解在现行的无线路由器上已基本取消。所以我们搜索到的待破WiFi基本都是wpa或wpa2加密的。至于使用认证服务器(如radius等)的wpa认证在个人无线WiFi领域基本不可能，所以通常我们能搜索到的待破WiFi都是基于本地密码的wpa或wpa2加密WiFi。</p><p>破解wpa和wpa2加密的WiFi网络的基本原理通俗来讲，我们需要先在无线网卡监听模式下搜集目标WiFi的信息，例如ssid（WiFi名称）、BSSID（也就是目标WiFi无线路由器的MAC）、已连接的客户端mac、信号强度等信息。然后发送伪造的取消关联的数据包迫使已连接到该WiFi的客户端与WiFi断开连接，重点是，断开连接后，客户端会重新尝试发起连接到该WiFi网络，这时客户端会发送一个带有认证密码的数据包以便请求重新连入WiFi，这个包俗称为握手包。这时我们的攻击机利用攻击程序和无线网卡监听抓取到这个握手包，这个握手包里就含有WiFi密码，但这个密码当然是经过加密的，所以后续就需要我们使用攻击程序调用密码字典结合获取到的BSSID、客户端MAC等信息进行运算，不断运算字典中的每一个密码，直到有一个密码使用wpa算法能算出一个与抓到的握手包中一致的加密字串，这个就是目标WiFi的密码了。如果把字典里的每一个密码都算过一遍仍然没有一个与抓取到的握手包加密字串一致的，就破解失败，退出，构造新的字典再试。</p><h3 id="2-所用工具-1"><a href="#2-所用工具-1" class="headerlink" title="(2)所用工具"></a>(2)所用工具</h3><p>kali攻击机</p><p>无线网卡</p><h3 id="3-实验详细步骤-1"><a href="#3-实验详细步骤-1" class="headerlink" title="(3)实验详细步骤"></a>(3)实验详细步骤</h3><p>将虚拟机连接上网卡，查看本机网卡情况</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114181642910.png" class="" title="image-20240114181642910"><p>启动wifite</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114181802763.png" class="" title="image-20240114181802763"><p>wifite使用比较简单，选择需要暴力破解的wifi即可，这里以”4455”这个热点为例，ctrl+C后我们输入前面的序号1，选择该wifi,经过一段时间的暴力破解后即可得到目的wifi的密码，这里可以看到“4455”的密码是qwe123456</p><img src="/2024/01/14/%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB/image-20240114182848652.png" class="" title="image-20240114182848652">]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>近源攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARP欺骗</title>
    <link href="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/"/>
    <url>/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h1><h3 id="一·前置知识"><a href="#一·前置知识" class="headerlink" title="一·前置知识"></a>一·前置知识</h3><h4 id="（1）协议简介"><a href="#（1）协议简介" class="headerlink" title="（1）协议简介"></a>（1）协议简介</h4><p>SMTP称为简单邮件传输协议（Simple Mail Transfer Protocal），目标是向用户提供高效、可靠的邮件传输。它的一个重要特点是它能够在传送中接力传送邮件，即邮件可以通过不同网络上的主机接力式传送。通常它工作在两种情况下：一是邮件从客户机传输到服务器；二是从某一个服务器传输到另一个服务器。SMTP是一个请求&#x2F;响应协议，它监听25号端口，用于接收用户的Mail请求，并与远端Mail服务器建立SMTP连接。</p><h4 id="（2）SMTP工作原理"><a href="#（2）SMTP工作原理" class="headerlink" title="（2）SMTP工作原理"></a>（2）SMTP工作原理</h4><p>SMTP通常有两种工作模式。发送SMTP和接收SMTP。具体工作方式为：发送SMTP在接收到用户的邮件请求后，判断此邮件是否为本地邮件，若是直接投送到用户的邮箱，否则向DNS查询远端邮件服务器的MX记录，并建立与远端接收SMTP之间的一个双向传送通道，此后SMTP命令由发送SMTP发出，由接收SMTP接收，而应答则反方向传送。一旦传送通道建立，SMTP发送者发送MAIL命令指明邮件发送者。如果SMTP接收者可以接收邮件则返回OK应答。SMTP发送者再发出RCPT命令确认邮件是否接收到。如果SMTP接收者接收，则返回OK应答；如果不能接收到，则发出拒绝接收应答（但不中止整个邮件操作），双方将如此反复多次。当接收者收到全部邮件后会接收到特别的序列，入伏哦接收者成功处理了邮件，则返回OK应答。</p><h4 id="（3）ARP欺骗原理"><a href="#（3）ARP欺骗原理" class="headerlink" title="（3）ARP欺骗原理"></a>（3）ARP欺骗原理</h4><p><strong>ARP协议简介：</strong> ARP是一种用于解析IP地址和MAC地址之间关系的协议。当一台计算机需要与另一台计算机通信时，它会使用ARP协议查询目标IP地址对应的MAC地址。</p><p><strong>攻击者发送虚假ARP响应：</strong> 攻击者通过发送虚假的ARP响应，欺骗目标计算机。攻击者向网络中的目标发送ARP响应，声称自己是另一台计算机的MAC地址。这样，目标计算机将错误的MAC地址与目标IP地址关联起来。</p><p><strong>目标计算机更新ARP缓存：</strong> 收到虚假ARP响应的目标计算机会将欺骗者提供的错误MAC地址存储在其ARP缓存中。此时，目标计算机会认为欺骗者的MAC地址是目标IP地址的正确映射。</p><p><strong>流量被重定向：</strong> 由于目标计算机已经将错误的MAC地址存储在ARP缓存中，所有发送到目标IP地址的网络流量都将被发送到欺骗者而不是真正的目标。</p><p><strong>中间人攻击：</strong> 攻击者可以在中间人位置拦截、修改或监视通过它的所有流量。这允许攻击者捕获敏感信息，例如用户名、密码等，或者对通信进行操纵。</p><h3 id="二-实验原理"><a href="#二-实验原理" class="headerlink" title="二.实验原理"></a>二.实验原理</h3><p>Kali作为攻击者，利用arp欺骗成为受害者Ubuntu和VMware网关之间的中间人，从而获取Ubuntu访问163 SMTP服务器的数据流，随之进行进一步的分析利用。</p><h3 id="三-详细实验步骤"><a href="#三-详细实验步骤" class="headerlink" title="三.详细实验步骤"></a>三.详细实验步骤</h3><p>攻击机：kail  192.168.63.136 00:0c:29:dc:86:ac</p><p>目标机：ubuntu 192.168.63.129 00:0c:29:4b:00:4e</p><p>网关：192.168.63.1   00:50:56:C0:00:08</p><p>在攻击机kail中启用流量转发，这样被攻击机就不会断网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forword <br></code></pre></td></tr></table></figure><p>启动ettercap -G启动图形化界面（该工具已经内置在kail中，无需再次安装）</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114091607580.png" class="" title="image-20240114091607580"><p>我们选择目标网关192.168.63.1与目标地址192.168.63.129</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114095012880.png" class="" title="image-20240114095012880"><p>进行自动ARP欺骗</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114095121739.png" class="" title="image-20240114095121739"><p>此时我们在目标机中输入arp查看网关地址，发现已将变成了攻击机的mac地址</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114095507893.png" class="" title="image-20240114095507893"><p>尝试获取目标主机的http信息，使用如下命令,将截获的数据包保存为ubuntu129.pcap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth0 host 192.168.63.129 and tcp port 80 -w /tmp/ubuntu129.pcap<br></code></pre></td></tr></table></figure><p>在拦截的数据包中我们可以看到目标主机曾访问了某大学的一些网页</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114101211795.png" class="" title="image-20240114101211795"><p>至此，arp欺骗已基本完成，下面进行邮件拦截，首先看一下自己邮箱的SMTP和POP3服务有没有正常开启</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114102905015.png" class="" title="image-20240114102905015"><p>在目标机上运行脚本发送邮件即可，发送脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding: utf-8-*-</span><br><br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><br>SMTPSrv = <span class="hljs-string">&quot;smtp.126.com&quot;</span><br>Sender = <span class="hljs-string">&quot;XXXX@126.com&quot;</span><span class="hljs-comment">#这里输入自己的邮箱地址</span><br>Passwd = <span class="hljs-string">&quot;your_email_password_or_app_password&quot;</span>  <span class="hljs-comment"># 使用邮箱的登录授权码而非直接密码</span><br><br>txt = <span class="hljs-string">&quot;hello qfnu!!!!&quot;</span><br>msg = MIMEText(txt)<br>msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&quot;hello QFNU&quot;</span><br>msg[<span class="hljs-string">&#x27;From&#x27;</span>] = Sender<br>msg[<span class="hljs-string">&#x27;To&#x27;</span>] = <span class="hljs-string">&quot;XXXXX@qfnu.edu.cn&quot;</span><br><br><span class="hljs-comment"># 使用SMTP_SSL连接，并将端口改为587</span><br><span class="hljs-keyword">with</span> smtplib.SMTP_SSL(SMTPSrv, <span class="hljs-number">587</span>) <span class="hljs-keyword">as</span> smtp:<br>    smtp.login(Sender, Passwd)<br>    smtp.sendmail(Sender, [<span class="hljs-string">&quot;XXXX@qfnu.edu.cn&quot;</span>], msg.as_string())<span class="hljs-comment">###这里可以填自己的收件地址</span><br><br></code></pre></td></tr></table></figure><p>在接收端我们可以看到发送的邮件</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/b5b1bf7bab5ea98c7fee3197eaa4a2f0.png" class="" title="b5b1bf7bab5ea98c7fee3197eaa4a2f0"><p>在攻击机端，我们过滤出SMTP协议的数据包后，可以看到目标主机的邮件发送行为数据。我这里使用的是126邮箱的587端口，可以看到获取的数据都是加密数据，同学们感兴趣的也可以尝试使用25端口，尝试获取SMTP明文数据。</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/image-20240114112149420.png" class="" title="image-20240114112149420"><p>当我们用以下脚本，利用25端口测试时，可以捕获到明文数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding: utf-8-*-</span><br><br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> *<br><br>SMTPSrv = <span class="hljs-string">&quot;smtp.163.com&quot;</span><br>Sender = <span class="hljs-string">&quot;XXXX@163.com&quot;</span><br>Passwd = <span class="hljs-string">&quot;XXXXX&quot;</span><br><br>txt = <span class="hljs-string">&quot;Hello, Qufu Normal University students&quot;</span><br>msg = MIMEText(txt)<br>msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&quot;hello,QFNU&quot;</span><br>msg[<span class="hljs-string">&#x27;From&#x27;</span>] = Sender<br>msg[<span class="hljs-string">&#x27;To&#x27;</span> ] = <span class="hljs-string">&quot;XXXX@qfnu.edu.cn&quot;</span><br><br>smtp = smtplib.SMTP(SMTPSrv, <span class="hljs-number">25</span>)<br>smtp.login(Sender, Passwd)<br>smtp.sendmail(Sender, [Sender], msg.as_string())<br>smtp.quit()<br></code></pre></td></tr></table></figure><p>我们可以在攻击机中看到捕获的明文信息，例如收件人，发件人，邮件内容等。</p><img src="/2024/01/14/%E5%AE%9E%E8%AE%AD%E4%B8%80_ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/da5745148268ca5eee7089d0e670f04d.png" class="" title="da5745148268ca5eee7089d0e670f04d">]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学-CTF中常见RSA题型</title>
    <link href="/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/"/>
    <url>/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF中常见的RSA题型"><a href="#CTF中常见的RSA题型" class="headerlink" title="CTF中常见的RSA题型"></a>CTF中常见的RSA题型</h1><h3 id="一-分解得到p-q，实现对密码的攻击"><a href="#一-分解得到p-q，实现对密码的攻击" class="headerlink" title="一.分解得到p,q，实现对密码的攻击"></a>一.分解得到p,q，实现对密码的攻击</h3><p>当n不大或者n已经被分解过之后，可以尝试使用该方法</p><p>可以使用大整数分解网站查询有无已经分解出来的<a href="http://factordb.com/">http://factordb.com/</a></p><p>本地的话可以使用yafu进行分解。</p><p>分解出p,q后即可得到私钥，从而实现破解密文。</p><p>以这个为例，我们仅了解n,c,e,但是我们可以分解n,分解结果如下</p><img src="/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/image-20240113154636401.png" class="" title="image-20240113154636401"><p>得到分解结果后就可以正常RSA脚本解密了</p><img src="/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/image-20240113155956531.png" class="" title="image-20240113155956531"><p>所用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>q = <span class="hljs-number">189239861511125143212536989589123569301</span><br>p = <span class="hljs-number">386123125371923651191219869811293586459</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">28767758880940662779934612526152562406674613203406706867456395986985664083182</span><br>n = <span class="hljs-number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span><br>n = q*p<br><span class="hljs-built_in">print</span>(n)<br>d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d=&quot;</span>,d)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h3 id="二-低加密指数攻击"><a href="#二-低加密指数攻击" class="headerlink" title="二.低加密指数攻击"></a>二.低加密指数攻击</h3><p>当e很小的时候，可以尝试该攻击方式。</p><p>RSA的加解密原理中有c&#x3D;m^e+kn,我们可以对k进行爆破，直到c-kn可以开根，从而得到m。</p><p>在这个实例中，我们可以发现n很大，尝试大整数分解后无果，但是e很小。</p><img src="/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/image-20240113162211573.png" class="" title="image-20240113162211573"><p>尝试进行低加密指数攻击，可以得到原始明文</p><img src="/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/image-20240113162255218.png" class="" title="image-20240113162255218"><p>以下为使用的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>n=<span class="hljs-number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span><br><br>e=<span class="hljs-number">0x3</span><br>c=<span class="hljs-number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span><br><br><br>n=<span class="hljs-built_in">int</span>(n)<br>e=<span class="hljs-built_in">int</span>(e)<br>c=<span class="hljs-built_in">int</span>(c)<br><br>m=iroot(c,e)<br><span class="hljs-keyword">if</span> m[<span class="hljs-number">1</span>]:<br>    m=m[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h3 id="三-共模攻击"><a href="#三-共模攻击" class="headerlink" title="三.共模攻击"></a>三.共模攻击</h3><p>当存在多组的c和e时，e之间互质，模数n相同，可以尝试进行共模攻击，以下为详细步骤</p><ol><li><strong>获取两个不同的RSA公钥：</strong> 攻击者首先需要获取两个不同的RSA公钥，这两个公钥具有相同的共模（即两个公钥的N值相同），但指数（e值）是不同的。</li><li><strong>确定公共模数N：</strong> 攻击者知道两个公钥的N值相同。N是两个素数（p和q）的乘积，而这两个素数生成了不同的RSA公钥。攻击者需要将N值提取出来，这样他们就能够使用相同的N进行攻击。</li><li><strong>计算最大公约数（GCD）：</strong> 使用欧几里得算法，攻击者计算两个公钥的指数之间的最大公约数（GCD）。这是攻击的关键步骤，因为共模攻击的基础是使用GCD来找到两个指数的线性组合，从而获得一个可以破解加密的私钥。</li><li><strong>计算私钥：</strong> 一旦攻击者找到两个指数的线性组合，他们就可以使用扩展的欧几里得算法来计算相应的私钥d。私钥d是用于解密信息的关键。</li><li><strong>解密信息：</strong> 攻击者使用计算出的私钥d来解密之前被RSA加密的信息。</li></ol><p>以下面题目为例，可以看到仅知道两组的e和c,可以进行RSA共模攻击</p><img src="/2024/01/13/RSA%E5%AD%A6%E4%B9%A0240113/image-20240113163629975.png" class="" title="image-20240113163629975"><p>使用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>c1= <span class="hljs-number">295658788074157816670393593671184451782123605135184996662528766686642109492132533952160456440919197939935742027629210419312032730004032666912404179229952394343569590488768472800784830058534578639706805456277578757250365834591813481786084959844340418320620440636997732915872346619679993987903742079972676425404864295283955565746004124045155664762158516005326368384488346997494926539295740248007606864906884407198601326915643000764477435205579583836917598642053869541648731754384026407310786288997756775232852732033054591953078116290088267188296560877481534143707414153749140670404213262630122369941889862912426176115220410931992046973925991075473656781794097329513119548617920256625579072719981729556158392454956362838720993254919638177786730004086883044525967823454986241038123671907279715773848673713008902432841449556980494600938989397567019338970200872333713986608537678650318511128703055185979834233315117153115613952940778789222515375743186066883492596068186378372611075958909412662251913621375996518671118244409393829141365207153662416265238312206577474940661548038715230313608405518108581922154335405303862701783678336161505643508831482409054761542959278392940037561736468155509922530420964726953308604138731805543997557197893</span><br>c2= <span class="hljs-number">219454357017359138238563345020257296433275019950745269658921329153689267055871241202626317639487122341365759606018366576305678949982408366815977617307888894995289951707241009621444691307275542686770303994110416384086739599181934011812163156338859395115724413628620575935425221522079154607411877822646179457455118804970038865452163833416447505142114976758532806787419762250921421272492466133659234602794242531776209324085944417173098820895755851386042954303555790085402616519592065446023510096773546730662074307900123349548340507067971393642039476326402523930789953483843698593104578179169624886357604650615249286150367204109726460230037005175927865466199600272190112483494387929732049738312695796015009178606906549093365261114132002222704510637261038978031857378729856467918978246977163353146981239215886053379980533235786905270211605457443266127512667882149285155542735532327780898540341696557860555884277608448996773250847560675650046440569736010800155992053362696097992699863059686881689842065077997427372972290872427656847223849769329713841670853267584161386494525686204330028142217737052411422895042170169703550774908415280261731967511925122636118468176645781785352430657090024109246103061415446942211482659025722233229083093876</span><br>n= <span class="hljs-number">549785700554963543393222974982211136067042846536450239199968863551137077564447156832697813202963334596948298760762991663065504535035143397250208506445202607659676332816610122258862787906629525548439909792727593939957178783466989816894454522630301104349317697612174888605090061231211194974337772507249418567229560145454791075929946332668360553910328900103264562348881791004831033587660163923517440406942993348972589262051083908075790422096042338651001937740085414301019827335549437397656318095919875053213333008551761167437683250592542156348138055482054331330609375930693247365749085041596578748797801601289693449629548744535914348450016287545136436964138806081283470239420969311905998245715160353982174880912315601876305613349276824998688275587308133069178764001924866079232824850209407236694426779262951463035278887804883917516580169051530590466082511045503107508117656821592538792566264160105940730326929474477787053681516844548383814388361089499629312831727731267796167205124844987064389097138747938870221504684958713047985374714612321540288239995935347905120710583169131356970267386562665138437631517802641426575996558648777831102462652517305151412695166331935115971277205305816897886952646432233312318756155702046584205507027737</span><br>e1 = <span class="hljs-number">3247473589</span><br>e2 = <span class="hljs-number">3698409173</span><br><br><span class="hljs-comment">#共模攻击</span><br><span class="hljs-comment">#共模攻击函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_gong_N_def</span>(<span class="hljs-params">e1,e2,c1,c2,n</span>):<br>    e1, e2, c1, c2, n=<span class="hljs-built_in">int</span>(e1),<span class="hljs-built_in">int</span>(e2),<span class="hljs-built_in">int</span>(c1),<span class="hljs-built_in">int</span>(c2),<span class="hljs-built_in">int</span>(n)<br>    s = gmpy2.gcdext(e1, e2)<br>    s1 = s[<span class="hljs-number">1</span>]<br>    s2 = s[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> s1 &lt; <span class="hljs-number">0</span>:<br>        s1 = - s1<br>        c1 = gmpy2.invert(c1, n)<br>    <span class="hljs-keyword">elif</span> s2 &lt; <span class="hljs-number">0</span>:<br>        s2 = - s2<br>        c2 = gmpy2.invert(c2, n)<br>    m = (<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2 ,s2 ,n)) % n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br>m = rsa_gong_N_def(e1,e2,c1,c2,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/qq_45521281/article/details/114706622">https://blog.csdn.net/qq_45521281/article/details/114706622</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF-Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学-仿射密码</title>
    <link href="/2024/01/13/%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81/"/>
    <url>/2024/01/13/%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h1><h3 id="一-密码体制分析"><a href="#一-密码体制分析" class="headerlink" title="一.密码体制分析"></a>一.密码体制分析</h3><p>仿射密码本质上是一种替换密码，使用加密函数对每个字母逐个加密。</p><p><strong>加密函数</strong> E(x) &#x3D; (ax + b)(mod m)</p><p>其中m为加密表中字母数量，一般取26。</p><p>b一般为常数。</p><p>a与m需要互质，即gcd(a,m)&#x3D;&#x3D;1</p><p><strong>解密函数</strong> D(x) &#x3D; a^-1(x - b)(mod m)</p><p>其中a^-1是a在乘法群中的逆元，可以用扩展欧几里得算法求得。</p><h3 id="二-加密与解密实例分析"><a href="#二-加密与解密实例分析" class="headerlink" title="二.加密与解密实例分析"></a>二.加密与解密实例分析</h3><p>我们可以设置加密函数为E(x) &#x3D; (3x + 1)(mod 26)，加密表为26个英文字母。</p><p>设置明文为 QFNUHELLO,根据加密原理可以得到下面的表格</p><table><thead><tr><th align="center">明文</th><th align="center">Q</th><th align="center">F</th><th align="center">N</th><th align="center">U</th><th align="center">H</th><th align="center">E</th><th align="center">L</th><th align="center">L</th><th align="center">O</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">16</td><td align="center">5</td><td align="center">13</td><td align="center">20</td><td align="center">7</td><td align="center">4</td><td align="center">11</td><td align="center">11</td><td align="center">14</td></tr><tr><td align="center">3x+1</td><td align="center">49</td><td align="center">16</td><td align="center">40</td><td align="center">61</td><td align="center">22</td><td align="center">13</td><td align="center">34</td><td align="center">34</td><td align="center">43</td></tr><tr><td align="center">3x+1(mod 26)</td><td align="center">23</td><td align="center">16</td><td align="center">14</td><td align="center">9</td><td align="center">22</td><td align="center">13</td><td align="center">8</td><td align="center">8</td><td align="center">17</td></tr><tr><td align="center">密文</td><td align="center">X</td><td align="center">Q</td><td align="center">O</td><td align="center">J</td><td align="center">W</td><td align="center">N</td><td align="center">I</td><td align="center">I</td><td align="center">R</td></tr></tbody></table><p>这样我们得到加密后的密文为XQOJWNIIR</p><p>利用拓展欧几里得算法可以求得3在模26下的乘法逆元为9。</p><p>逐个字母代入解密函数进行解密即可得到解密后明文为QFNUHELLO</p><h3 id="三-代码实现与分析"><a href="#三-代码实现与分析" class="headerlink" title="三.代码实现与分析"></a>三.代码实现与分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">while</span> b:<br>        a, b = b, a % b<br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inverse</span>(<span class="hljs-params">a, m</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        <span class="hljs-keyword">if</span> (a * i) % m == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">affine_encrypt</span>(<span class="hljs-params">text, key</span>):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    a, b = key<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-keyword">if</span> char.isupper():<br>                result += <span class="hljs-built_in">chr</span>((a * (<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">65</span>) + b) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)<br>            <span class="hljs-keyword">else</span>:<br>                result += <span class="hljs-built_in">chr</span>((a * (<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">97</span>) + b) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br>        <span class="hljs-keyword">else</span>:<br>            result += char<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">affine_decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    a, b = key<br>    a_inv = mod_inverse(a, <span class="hljs-number">26</span>)<br>    <span class="hljs-keyword">if</span> a_inv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;密钥错误！！！&quot;</span>)<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> ciphertext:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-keyword">if</span> char.isupper():<br>                result += <span class="hljs-built_in">chr</span>((a_inv * (<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">65</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)<br>            <span class="hljs-keyword">else</span>:<br>                result += <span class="hljs-built_in">chr</span>((a_inv * (<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">97</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br>        <span class="hljs-keyword">else</span>:<br>            result += char<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 例子</span><br>text = <span class="hljs-string">&quot;QFNUHELLO&quot;</span><br>key = (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 选择合适的a和b值</span><br>encrypted_text = affine_encrypt(text, key)<br>decrypted_text = affine_decrypt(encrypted_text, key)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原文:&quot;</span>, text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加密后:&quot;</span>, encrypted_text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后:&quot;</span>, decrypted_text)<br><br></code></pre></td></tr></table></figure><p>还是对上面明文“QFNUHELLO”进行加解密，可以得到如下结果</p><img src="/2024/01/13/%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81/image-20240113102733731.png" class="" title="image-20240113102733731"><h3 id="四-仿射密码破解"><a href="#四-仿射密码破解" class="headerlink" title="四.仿射密码破解"></a>四.仿射密码破解</h3><p>破解可以采用下面的几种方式</p><ol><li><strong>尝试所有可能的密钥组合：</strong> 由于仿射密码的密钥是由两个整数（a和b）组成，可以通过尝试所有可能的组合来进行破解。</li><li><strong>使用统计信息：</strong> 如果无法尝试所有可能的组合，可以利用语言的统计信息。例如，在英语中，字母频率是有规律的，其中 ‘e’ 是最常用的字母。通过分析密文中的字母频率，可以尝试匹配常见的字母频率分布，从而推测可能的密钥。</li><li><strong>检查结果的合理性：</strong> 解密后的文本应该具有合理的语法和意义。如果得到的结果看起来毫无意义，可能需要调整密钥。</li></ol><p>这里用暴力破解法进行仿射密码的破解，依旧采用QFNUHELLO加密后的密文为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">while</span> b:<br>        a, b = b, a % b<br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inverse</span>(<span class="hljs-params">a, m</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        <span class="hljs-keyword">if</span> (a * i) % m == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">affine_decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    a, b = key<br>    a_inv = mod_inverse(a, <span class="hljs-number">26</span>)<br>    <span class="hljs-keyword">if</span> a_inv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The key is not valid for decryption.&quot;</span>)<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> ciphertext:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-keyword">if</span> char.isupper():<br>                result += <span class="hljs-built_in">chr</span>((a_inv * (<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">65</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)<br>            <span class="hljs-keyword">else</span>:<br>                result += <span class="hljs-built_in">chr</span>((a_inv * (<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">97</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br>        <span class="hljs-keyword">else</span>:<br>            result += char<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force_affine</span>(<span class="hljs-params">ciphertext</span>):<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">26</span>):<br>        <span class="hljs-keyword">if</span> gcd(a, <span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>                possible_key = (a, b)<br>                decrypted_text = affine_decrypt(ciphertext, possible_key)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Attempted Key: <span class="hljs-subst">&#123;possible_key&#125;</span>, Decrypted Text: <span class="hljs-subst">&#123;decrypted_text&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 例子</span><br>encrypted_text = <span class="hljs-string">&quot;XQOJWNIIR&quot;</span><br>brute_force_affine(encrypted_text)<br><br></code></pre></td></tr></table></figure><p>破解后可以得到下面的结果：</p><img src="/2024/01/13/%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81/image-20240113103300183.png" class="" title="image-20240113103300183"><p>参考文章：<a href="https://www.cnblogs.com/Mayfly-nymph/p/12394329.html">https://www.cnblogs.com/Mayfly-nymph/p/12394329.html</a></p>]]></content>
    
    
    <categories>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>古典密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年度总结</title>
    <link href="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>当自己在2023年的最后一天回顾这一年时，回忆很模糊，仅凭相册中每个月的照片拼凑回忆这一年，简短的总结自己的2023吧。</p><p>去年的这个时间早已离校返乡，一月初在当地的一所教育机构里工作了不到半个月，在工作中还参加了潍坊市的大学生返家乡活动，工作还是比较轻松的，无非是整理信息，联系人员这类工作，工作期间偶然跟自己22年暑假带的一批学生相见，半年变化挺大的，可能有高三复习带来的压抑吧</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20231231200610368.png" class="" title="image-20231231200610368"><p>寒假在家跟几个好几年没见的发小见面，变化都挺大，有的已经工作几年，有的处在毕业和工作的交叉口，还有跟我一样依旧在读书的，但相互带来的感觉还是熟悉与亲切，就像好多年前。</p><p>二月初就已经返校，在学校依旧是常规的上课，作业，实验报告，偶尔有空也会去参加下活动或者竞赛，去凑几张获奖证书罢了，也是在这学期第一次跟同学出去游玩，在学校里封锁了一年确实没有过多外出过，常出去走走看看也是挺不错了。（外出也要注意防护，先甲流又阳性让我在一个月里高烧不断，天天吞布洛芬😵）</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20231231200630051.png" class="" title="image-20231231200630051"><p>三月份时临时接了网络技术的培训，还记得自己当时为了赶备课到凌晨三点，第二天八点再去上课，忙碌总会让人暂时的平息焦虑与烦恼，那段时间收获挺大的，也感谢当时李老师指导我，感谢芃哥借我自行车通勤😎。四月份时学校运动会临时改项目到男子全能，自己胖了不少（当时值班时还被雨姐一顿嘲笑😭）好在还为学院拿到了分数，不过因为决赛当天比较冷没有做好防寒措施自己跑完直接感冒还是很难受的，为什么发烧的总是我？😭</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20231231200645397.png" class="" title="image-20231231200645397"><p>五六月份去了从师技能大赛和主持人大赛，因为一些原因没去校赛，权当是体验体验吧，也是在这时开始对于活动竞赛的认识发生了变化，沉溺于这些所谓的活动竞赛让自己很“空”，我这一年最多的感受就是“空”，也许是眼花缭乱的现实与大量繁杂的信息的摄入让我渐渐迷失了吧。</p><p>暑假在家躺了一个星期后开始着手跟同学做嵌入式了，自己从0开始还是有点懵的，匆忙的写完传感器部分代码后就开始反复的测试与调试了，自己当时手动并联还是挺勇的，好在电压不大，仅是烧了根线罢了，嵌入式是真的好玩🥹。项目交付到队友手里做最后的组装和调试后自己就投身假期的第一个工作了，一遍遍修改第一天的组织安排以及人员分配，前期工作还是比较顺利的，无论是学生组织上还是家长反馈联系上，不过今年由于工作需要，自己工作期间在学生眼中始终是严厉的，也跟好多学生谈过话，还记得为了劝说一个逃课的学生跟他谈了一晚上，还记得第一次鼓励他们自己上讲台分享时很多学生的眼光，所做的教育能得到回响，对我来说就已经值得了，哪怕若干年后没人记得，每次充当教师这个身份，总能想起二中对我的教育，那时不懂的一些教育理念，在我站在讲台上看着学生们时得到了理解，真正的教育也是在此刻才算完成吧。</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20231231200701573.png" class="" title="image-20231231200701573"><p>八月份时在工作报道的第一天，结束了短短两个月的一段感情，也许是接踵而来的大量工作将我短暂麻痹了吧，从白天到黑夜的连续工作虽然使人疲倦，倒也算一剂偏药，让你不顾过去与未来，仅聚焦于当下自己手中的工作，到后来自己回想，也终是不合适吧，又何必再去找答案呢？</p><p>九月开学后第一周就跟朋友们去夜爬泰山，本是自己的临时起意，没想到顺口问一句说走就走，虽然自己不喜欢半夜赶攻略做计划，但是这种年轻的感觉真好，哈哈哈哈。</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/b&bo=IANYAiADWAIBByA!&rf=viewer_4.jpeg" class="" title="img"><p>九月末又去一次尼山世界文明论坛，不过这次不做祭孔大典部分的工作了，工作相对去年来说轻松了不少，不过自己老在工作地点迷路，有一次带着组内成员吃饭，不清楚地点带队去了地下员工餐厅，让双方尴尬了好久😂，十月去了一趟烟台，很喜欢烟台这座城市，跟川哥一天四万步着实有点顶不住，网吧过夜也有些难顶，但路途的风景值得，下次有机会再去吧。</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/b&bo=oAU4BKAFOAQBFzA!&rf=viewer_4.jpeg" class="" title="img"><p>十月剩下的时间去打了下竞赛，结果差一点，还是挺遗憾的，希望下一年的师弟师妹们能越打越好吧，十一月顺便去客串了物院的迎新晚会，剩下的时间就在繁多的实验作业与材料提交以及自己的虚度光阴中流逝了，十二月跟着学院统一去了南京（感谢学院给的机会😘），紫金山实验室，秦淮河，都蛮好的。</p><img src="/2023/12/31/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/b&bo=UghABlIIQAYBByA!&rf=viewer_4.jpeg" class="" title="img"><p>如果要用一个词来定义我的2023年的话，可能就是“彷徨”吧，倘若有看到这里的师弟师妹，希望你们能够早日认清自己要做什么，要成为什么，犹豫到最后，就是一无所有了，不要在诸多事宜中迷失自我，去勇敢的向这个世界争取，去不断进步。风起于青萍之末，浪成于微澜之间，只要开始，哪怕一步步很慢，那也会离对岸越来越近。</p><p>2024年，希望自己能不再内耗，认清未来，无限进步，也祝愿看到这里的你万事如意！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023强网杯-谍影重重2.0</title>
    <link href="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/"/>
    <url>/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/</url>
    
    <content type="html"><![CDATA[<h1 id="谍影重重2-0"><a href="#谍影重重2-0" class="headerlink" title="谍影重重2.0"></a>谍影重重2.0</h1><p>看一眼题目，附件下载下来是一个流量包</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled.png" class="" title="Untitled"><p>要找出流量包中设计ICAO CODE的数据，查了查ICAO CODE的相关信息，应该是个24位地址</p><p>可以找到相关的格式以及样例</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%201.png" class="" title="Untitled 1"><p>打开流量包，都是tcp，考虑信息在tcp payload中</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%203.png" class="" title="Untitled 3"><p>将流量包中所有的tcp payload都导出</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%204.png" class="" title="Untitled 4"><p>搜索获得了可用信息的格式，以及如何解码（可见：<a href="https://mode-s.org/decode/content/ads-b/1-basics.html">https://mode-s.org/decode/content/ads-b/1-basics.html</a>）</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%205.png" class="" title="Untitled 5"><p>将有效信息进行提取和排序</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%206.png" class="" title="Untitled 6"><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%207.png" class="" title="Untitled 7"><p>将提取后的信息解码后进行速度比较可以得到答案</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D2.0/Untitled%208.png" class="" title="Untitled 8"><p>最快的ICAD为79a05e，md5后就是flag了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF-Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023强网杯-speedup</title>
    <link href="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/"/>
    <url>/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/</url>
    
    <content type="html"><![CDATA[<h1 id="speedup"><a href="#speedup" class="headerlink" title="speedup"></a>speedup</h1><p>先看题目，要求一个大整数的每位相加</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/Untitled.png" class="" title="Untitled"><p>写个脚本尝试暴力跑一下，跑不动</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/Untitled%201.png" class="" title="Untitled 1"><p>去oeis找一下是否有相关的库，找到一个已经解到2^30的库</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/Untitled%202.png" class="" title="Untitled 2"><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/Untitled%203.png" class="" title="Untitled 3"><p>sha256后提交即可</p><img src="/2023/12/23/2023%E5%BC%BA%E7%BD%91%E6%9D%AF-speedup/Untitled%204.png" class="" title="Untitled 4">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF-Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一天</title>
    <link href="/2023/12/22/%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2023/12/22/%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>一直想着搭建一个博客来记录学习和生活的，本应该在大一搭建的，到大三才正式做，大学所剩时间也不多了，且行且珍惜吧</p><img src="/2023/12/22/%E7%AC%AC%E4%B8%80%E5%A4%A9/1f9bfb919387e6b7f955b6f5f17b3fa.jpg" class="" title="1f9bfb919387e6b7f955b6f5f17b3fa"><p>做一个阳光开朗，积极向上的人😄</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/22/hello-world/"/>
    <url>/2023/12/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
